using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the CallLog class.
	/// </summary>
    [Serializable]
	public partial class CallLogCollection : ActiveList<CallLog, CallLogCollection>
	{	   
		public CallLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CallLogCollection</returns>
		public CallLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                CallLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the A_CallLog table.
	/// </summary>
	[Serializable]
	public partial class CallLog : ActiveRecord<CallLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public CallLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public CallLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public CallLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public CallLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("A_CallLog", TableType.Table, DataService.GetInstance("VeritasInfo"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarCallReceived = new TableSchema.TableColumn(schema);
				colvarCallReceived.ColumnName = "CallReceived";
				colvarCallReceived.DataType = DbType.DateTime;
				colvarCallReceived.MaxLength = 0;
				colvarCallReceived.AutoIncrement = false;
				colvarCallReceived.IsNullable = true;
				colvarCallReceived.IsPrimaryKey = false;
				colvarCallReceived.IsForeignKey = false;
				colvarCallReceived.IsReadOnly = false;
				colvarCallReceived.DefaultSetting = @"";
				colvarCallReceived.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCallReceived);
				
				TableSchema.TableColumn colvarCallerName = new TableSchema.TableColumn(schema);
				colvarCallerName.ColumnName = "CallerName";
				colvarCallerName.DataType = DbType.AnsiString;
				colvarCallerName.MaxLength = 50;
				colvarCallerName.AutoIncrement = false;
				colvarCallerName.IsNullable = true;
				colvarCallerName.IsPrimaryKey = false;
				colvarCallerName.IsForeignKey = false;
				colvarCallerName.IsReadOnly = false;
				colvarCallerName.DefaultSetting = @"";
				colvarCallerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCallerName);
				
				TableSchema.TableColumn colvarCallerCompany = new TableSchema.TableColumn(schema);
				colvarCallerCompany.ColumnName = "CallerCompany";
				colvarCallerCompany.DataType = DbType.AnsiString;
				colvarCallerCompany.MaxLength = 50;
				colvarCallerCompany.AutoIncrement = false;
				colvarCallerCompany.IsNullable = true;
				colvarCallerCompany.IsPrimaryKey = false;
				colvarCallerCompany.IsForeignKey = false;
				colvarCallerCompany.IsReadOnly = false;
				colvarCallerCompany.DefaultSetting = @"";
				colvarCallerCompany.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCallerCompany);
				
				TableSchema.TableColumn colvarCallerNumber = new TableSchema.TableColumn(schema);
				colvarCallerNumber.ColumnName = "CallerNumber";
				colvarCallerNumber.DataType = DbType.AnsiString;
				colvarCallerNumber.MaxLength = 50;
				colvarCallerNumber.AutoIncrement = false;
				colvarCallerNumber.IsNullable = true;
				colvarCallerNumber.IsPrimaryKey = false;
				colvarCallerNumber.IsForeignKey = false;
				colvarCallerNumber.IsReadOnly = false;
				colvarCallerNumber.DefaultSetting = @"";
				colvarCallerNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCallerNumber);
				
				TableSchema.TableColumn colvarNotes = new TableSchema.TableColumn(schema);
				colvarNotes.ColumnName = "Notes";
				colvarNotes.DataType = DbType.AnsiString;
				colvarNotes.MaxLength = -1;
				colvarNotes.AutoIncrement = false;
				colvarNotes.IsNullable = true;
				colvarNotes.IsPrimaryKey = false;
				colvarNotes.IsForeignKey = false;
				colvarNotes.IsReadOnly = false;
				colvarNotes.DefaultSetting = @"";
				colvarNotes.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNotes);
				
				TableSchema.TableColumn colvarProjectID = new TableSchema.TableColumn(schema);
				colvarProjectID.ColumnName = "ProjectID";
				colvarProjectID.DataType = DbType.Int32;
				colvarProjectID.MaxLength = 0;
				colvarProjectID.AutoIncrement = false;
				colvarProjectID.IsNullable = true;
				colvarProjectID.IsPrimaryKey = false;
				colvarProjectID.IsForeignKey = false;
				colvarProjectID.IsReadOnly = false;
				colvarProjectID.DefaultSetting = @"";
				colvarProjectID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectID);
				
				TableSchema.TableColumn colvarVeritasEmployee = new TableSchema.TableColumn(schema);
				colvarVeritasEmployee.ColumnName = "VeritasEmployee";
				colvarVeritasEmployee.DataType = DbType.AnsiString;
				colvarVeritasEmployee.MaxLength = 25;
				colvarVeritasEmployee.AutoIncrement = false;
				colvarVeritasEmployee.IsNullable = true;
				colvarVeritasEmployee.IsPrimaryKey = false;
				colvarVeritasEmployee.IsForeignKey = false;
				colvarVeritasEmployee.IsReadOnly = false;
				colvarVeritasEmployee.DefaultSetting = @"";
				colvarVeritasEmployee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVeritasEmployee);
				
				TableSchema.TableColumn colvarEnteredBy = new TableSchema.TableColumn(schema);
				colvarEnteredBy.ColumnName = "EnteredBy";
				colvarEnteredBy.DataType = DbType.AnsiString;
				colvarEnteredBy.MaxLength = 25;
				colvarEnteredBy.AutoIncrement = false;
				colvarEnteredBy.IsNullable = true;
				colvarEnteredBy.IsPrimaryKey = false;
				colvarEnteredBy.IsForeignKey = false;
				colvarEnteredBy.IsReadOnly = false;
				colvarEnteredBy.DefaultSetting = @"";
				colvarEnteredBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEnteredBy);
				
				TableSchema.TableColumn colvarEnteredDate = new TableSchema.TableColumn(schema);
				colvarEnteredDate.ColumnName = "EnteredDate";
				colvarEnteredDate.DataType = DbType.DateTime;
				colvarEnteredDate.MaxLength = 0;
				colvarEnteredDate.AutoIncrement = false;
				colvarEnteredDate.IsNullable = true;
				colvarEnteredDate.IsPrimaryKey = false;
				colvarEnteredDate.IsForeignKey = false;
				colvarEnteredDate.IsReadOnly = false;
				colvarEnteredDate.DefaultSetting = @"";
				colvarEnteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEnteredDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["VeritasInfo"].AddSchema("A_CallLog",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("CallReceived")]
		[Bindable(true)]
		public DateTime? CallReceived 
		{
			get { return GetColumnValue<DateTime?>(Columns.CallReceived); }
			set { SetColumnValue(Columns.CallReceived, value); }
		}
		  
		[XmlAttribute("CallerName")]
		[Bindable(true)]
		public string CallerName 
		{
			get { return GetColumnValue<string>(Columns.CallerName); }
			set { SetColumnValue(Columns.CallerName, value); }
		}
		  
		[XmlAttribute("CallerCompany")]
		[Bindable(true)]
		public string CallerCompany 
		{
			get { return GetColumnValue<string>(Columns.CallerCompany); }
			set { SetColumnValue(Columns.CallerCompany, value); }
		}
		  
		[XmlAttribute("CallerNumber")]
		[Bindable(true)]
		public string CallerNumber 
		{
			get { return GetColumnValue<string>(Columns.CallerNumber); }
			set { SetColumnValue(Columns.CallerNumber, value); }
		}
		  
		[XmlAttribute("Notes")]
		[Bindable(true)]
		public string Notes 
		{
			get { return GetColumnValue<string>(Columns.Notes); }
			set { SetColumnValue(Columns.Notes, value); }
		}
		  
		[XmlAttribute("ProjectID")]
		[Bindable(true)]
		public int? ProjectID 
		{
			get { return GetColumnValue<int?>(Columns.ProjectID); }
			set { SetColumnValue(Columns.ProjectID, value); }
		}
		  
		[XmlAttribute("VeritasEmployee")]
		[Bindable(true)]
		public string VeritasEmployee 
		{
			get { return GetColumnValue<string>(Columns.VeritasEmployee); }
			set { SetColumnValue(Columns.VeritasEmployee, value); }
		}
		  
		[XmlAttribute("EnteredBy")]
		[Bindable(true)]
		public string EnteredBy 
		{
			get { return GetColumnValue<string>(Columns.EnteredBy); }
			set { SetColumnValue(Columns.EnteredBy, value); }
		}
		  
		[XmlAttribute("EnteredDate")]
		[Bindable(true)]
		public DateTime? EnteredDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EnteredDate); }
			set { SetColumnValue(Columns.EnteredDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime? varCallReceived,string varCallerName,string varCallerCompany,string varCallerNumber,string varNotes,int? varProjectID,string varVeritasEmployee,string varEnteredBy,DateTime? varEnteredDate)
		{
			CallLog item = new CallLog();
			
			item.CallReceived = varCallReceived;
			
			item.CallerName = varCallerName;
			
			item.CallerCompany = varCallerCompany;
			
			item.CallerNumber = varCallerNumber;
			
			item.Notes = varNotes;
			
			item.ProjectID = varProjectID;
			
			item.VeritasEmployee = varVeritasEmployee;
			
			item.EnteredBy = varEnteredBy;
			
			item.EnteredDate = varEnteredDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,DateTime? varCallReceived,string varCallerName,string varCallerCompany,string varCallerNumber,string varNotes,int? varProjectID,string varVeritasEmployee,string varEnteredBy,DateTime? varEnteredDate)
		{
			CallLog item = new CallLog();
			
				item.Id = varId;
			
				item.CallReceived = varCallReceived;
			
				item.CallerName = varCallerName;
			
				item.CallerCompany = varCallerCompany;
			
				item.CallerNumber = varCallerNumber;
			
				item.Notes = varNotes;
			
				item.ProjectID = varProjectID;
			
				item.VeritasEmployee = varVeritasEmployee;
			
				item.EnteredBy = varEnteredBy;
			
				item.EnteredDate = varEnteredDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CallReceivedColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CallerNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CallerCompanyColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CallerNumberColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NotesColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectIDColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn VeritasEmployeeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn EnteredByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn EnteredDateColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string CallReceived = @"CallReceived";
			 public static string CallerName = @"CallerName";
			 public static string CallerCompany = @"CallerCompany";
			 public static string CallerNumber = @"CallerNumber";
			 public static string Notes = @"Notes";
			 public static string ProjectID = @"ProjectID";
			 public static string VeritasEmployee = @"VeritasEmployee";
			 public static string EnteredBy = @"EnteredBy";
			 public static string EnteredDate = @"EnteredDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
