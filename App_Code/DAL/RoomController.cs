using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
    /// <summary>
    /// Controller class for A_Rooms
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class RoomController
    {
        // Preload our schema..
        Room thisSchemaLoad = new Room();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public RoomCollection FetchAll()
        {
            RoomCollection coll = new RoomCollection();
            Query qry = new Query(Room.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public RoomCollection FetchByID(object Id)
        {
            RoomCollection coll = new RoomCollection().Where("ID", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public RoomCollection FetchByQuery(Query qry)
        {
            RoomCollection coll = new RoomCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (Room.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (Room.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string RoomName,int ProjectID,string EntryType,string Machine,string MachineEnergy,int? DoorSize,string DoorHand,bool? DoorOnly,string WorkloadPrimary,string WorkloadSecondary,string MachineDoseRate,decimal? ModConvPctTime,decimal? ModConvPctEnergy,decimal? ModIMRTPctTime,decimal? ModIMRTPctEnergy,decimal? ModIMRTFactor,decimal? ModTBIPctTime,decimal? ModTBIPctEnergy,decimal? ModStereoPctTime,decimal? ModStereoPctEnergy,string Code)
	    {
		    Room item = new Room();
		    
            item.RoomName = RoomName;
            
            item.ProjectID = ProjectID;
            
            item.EntryType = EntryType;
            
            item.Machine = Machine;
            
            item.MachineEnergy = MachineEnergy;
            
            item.DoorSize = DoorSize;
            
            item.DoorHand = DoorHand;
            
            item.DoorOnly = DoorOnly;
            
            item.WorkloadPrimary = WorkloadPrimary;
            
            item.WorkloadSecondary = WorkloadSecondary;
            
            item.MachineDoseRate = MachineDoseRate;
            
            item.ModConvPctTime = ModConvPctTime;
            
            item.ModConvPctEnergy = ModConvPctEnergy;
            
            item.ModIMRTPctTime = ModIMRTPctTime;
            
            item.ModIMRTPctEnergy = ModIMRTPctEnergy;
            
            item.ModIMRTFactor = ModIMRTFactor;
            
            item.ModTBIPctTime = ModTBIPctTime;
            
            item.ModTBIPctEnergy = ModTBIPctEnergy;
            
            item.ModStereoPctTime = ModStereoPctTime;
            
            item.ModStereoPctEnergy = ModStereoPctEnergy;
            
            item.Code = Code;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int Id,string RoomName,int ProjectID,string EntryType,string Machine,string MachineEnergy,int? DoorSize,string DoorHand,bool? DoorOnly,string WorkloadPrimary,string WorkloadSecondary,string MachineDoseRate,decimal? ModConvPctTime,decimal? ModConvPctEnergy,decimal? ModIMRTPctTime,decimal? ModIMRTPctEnergy,decimal? ModIMRTFactor,decimal? ModTBIPctTime,decimal? ModTBIPctEnergy,decimal? ModStereoPctTime,decimal? ModStereoPctEnergy,string Code)
	    {
		    Room item = new Room();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Id = Id;
				
			item.RoomName = RoomName;
				
			item.ProjectID = ProjectID;
				
			item.EntryType = EntryType;
				
			item.Machine = Machine;
				
			item.MachineEnergy = MachineEnergy;
				
			item.DoorSize = DoorSize;
				
			item.DoorHand = DoorHand;
				
			item.DoorOnly = DoorOnly;
				
			item.WorkloadPrimary = WorkloadPrimary;
				
			item.WorkloadSecondary = WorkloadSecondary;
				
			item.MachineDoseRate = MachineDoseRate;
				
			item.ModConvPctTime = ModConvPctTime;
				
			item.ModConvPctEnergy = ModConvPctEnergy;
				
			item.ModIMRTPctTime = ModIMRTPctTime;
				
			item.ModIMRTPctEnergy = ModIMRTPctEnergy;
				
			item.ModIMRTFactor = ModIMRTFactor;
				
			item.ModTBIPctTime = ModTBIPctTime;
				
			item.ModTBIPctEnergy = ModTBIPctEnergy;
				
			item.ModStereoPctTime = ModStereoPctTime;
				
			item.ModStereoPctEnergy = ModStereoPctEnergy;
				
			item.Code = Code;
				
	        item.Save(UserName);
	    }
    }
}
