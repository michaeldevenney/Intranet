using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the Rfi class.
	/// </summary>
    [Serializable]
	public partial class RfiCollection : ActiveList<Rfi, RfiCollection>
	{	   
		public RfiCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>RfiCollection</returns>
		public RfiCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Rfi o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the PM_RFI table.
	/// </summary>
	[Serializable]
	public partial class Rfi : ActiveRecord<Rfi>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Rfi()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Rfi(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Rfi(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Rfi(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("PM_RFI", TableType.Table, DataService.GetInstance("VeritasInfo"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarProjectID = new TableSchema.TableColumn(schema);
				colvarProjectID.ColumnName = "ProjectID";
				colvarProjectID.DataType = DbType.Int32;
				colvarProjectID.MaxLength = 0;
				colvarProjectID.AutoIncrement = false;
				colvarProjectID.IsNullable = false;
				colvarProjectID.IsPrimaryKey = false;
				colvarProjectID.IsForeignKey = false;
				colvarProjectID.IsReadOnly = false;
				colvarProjectID.DefaultSetting = @"";
				colvarProjectID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectID);
				
				TableSchema.TableColumn colvarProjectName = new TableSchema.TableColumn(schema);
				colvarProjectName.ColumnName = "ProjectName";
				colvarProjectName.DataType = DbType.AnsiString;
				colvarProjectName.MaxLength = 100;
				colvarProjectName.AutoIncrement = false;
				colvarProjectName.IsNullable = true;
				colvarProjectName.IsPrimaryKey = false;
				colvarProjectName.IsForeignKey = false;
				colvarProjectName.IsReadOnly = false;
				colvarProjectName.DefaultSetting = @"";
				colvarProjectName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectName);
				
				TableSchema.TableColumn colvarCoreconID = new TableSchema.TableColumn(schema);
				colvarCoreconID.ColumnName = "CoreconID";
				colvarCoreconID.DataType = DbType.AnsiString;
				colvarCoreconID.MaxLength = 50;
				colvarCoreconID.AutoIncrement = false;
				colvarCoreconID.IsNullable = true;
				colvarCoreconID.IsPrimaryKey = false;
				colvarCoreconID.IsForeignKey = false;
				colvarCoreconID.IsReadOnly = false;
				colvarCoreconID.DefaultSetting = @"";
				colvarCoreconID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCoreconID);
				
				TableSchema.TableColumn colvarSubject = new TableSchema.TableColumn(schema);
				colvarSubject.ColumnName = "Subject";
				colvarSubject.DataType = DbType.AnsiString;
				colvarSubject.MaxLength = 50;
				colvarSubject.AutoIncrement = false;
				colvarSubject.IsNullable = true;
				colvarSubject.IsPrimaryKey = false;
				colvarSubject.IsForeignKey = false;
				colvarSubject.IsReadOnly = false;
				colvarSubject.DefaultSetting = @"";
				colvarSubject.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubject);
				
				TableSchema.TableColumn colvarPriority = new TableSchema.TableColumn(schema);
				colvarPriority.ColumnName = "Priority";
				colvarPriority.DataType = DbType.AnsiString;
				colvarPriority.MaxLength = 50;
				colvarPriority.AutoIncrement = false;
				colvarPriority.IsNullable = true;
				colvarPriority.IsPrimaryKey = false;
				colvarPriority.IsForeignKey = false;
				colvarPriority.IsReadOnly = false;
				colvarPriority.DefaultSetting = @"";
				colvarPriority.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriority);
				
				TableSchema.TableColumn colvarRequest = new TableSchema.TableColumn(schema);
				colvarRequest.ColumnName = "Request";
				colvarRequest.DataType = DbType.AnsiString;
				colvarRequest.MaxLength = -1;
				colvarRequest.AutoIncrement = false;
				colvarRequest.IsNullable = true;
				colvarRequest.IsPrimaryKey = false;
				colvarRequest.IsForeignKey = false;
				colvarRequest.IsReadOnly = false;
				colvarRequest.DefaultSetting = @"";
				colvarRequest.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRequest);
				
				TableSchema.TableColumn colvarSuggestion = new TableSchema.TableColumn(schema);
				colvarSuggestion.ColumnName = "Suggestion";
				colvarSuggestion.DataType = DbType.AnsiString;
				colvarSuggestion.MaxLength = -1;
				colvarSuggestion.AutoIncrement = false;
				colvarSuggestion.IsNullable = true;
				colvarSuggestion.IsPrimaryKey = false;
				colvarSuggestion.IsForeignKey = false;
				colvarSuggestion.IsReadOnly = false;
				colvarSuggestion.DefaultSetting = @"";
				colvarSuggestion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSuggestion);
				
				TableSchema.TableColumn colvarResponse = new TableSchema.TableColumn(schema);
				colvarResponse.ColumnName = "Response";
				colvarResponse.DataType = DbType.AnsiString;
				colvarResponse.MaxLength = -1;
				colvarResponse.AutoIncrement = false;
				colvarResponse.IsNullable = true;
				colvarResponse.IsPrimaryKey = false;
				colvarResponse.IsForeignKey = false;
				colvarResponse.IsReadOnly = false;
				colvarResponse.DefaultSetting = @"";
				colvarResponse.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResponse);
				
				TableSchema.TableColumn colvarRefDrawingNumber = new TableSchema.TableColumn(schema);
				colvarRefDrawingNumber.ColumnName = "RefDrawingNumber";
				colvarRefDrawingNumber.DataType = DbType.AnsiString;
				colvarRefDrawingNumber.MaxLength = 50;
				colvarRefDrawingNumber.AutoIncrement = false;
				colvarRefDrawingNumber.IsNullable = true;
				colvarRefDrawingNumber.IsPrimaryKey = false;
				colvarRefDrawingNumber.IsForeignKey = false;
				colvarRefDrawingNumber.IsReadOnly = false;
				colvarRefDrawingNumber.DefaultSetting = @"";
				colvarRefDrawingNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRefDrawingNumber);
				
				TableSchema.TableColumn colvarRefLocation = new TableSchema.TableColumn(schema);
				colvarRefLocation.ColumnName = "RefLocation";
				colvarRefLocation.DataType = DbType.AnsiString;
				colvarRefLocation.MaxLength = 50;
				colvarRefLocation.AutoIncrement = false;
				colvarRefLocation.IsNullable = true;
				colvarRefLocation.IsPrimaryKey = false;
				colvarRefLocation.IsForeignKey = false;
				colvarRefLocation.IsReadOnly = false;
				colvarRefLocation.DefaultSetting = @"";
				colvarRefLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRefLocation);
				
				TableSchema.TableColumn colvarRefSpecSection = new TableSchema.TableColumn(schema);
				colvarRefSpecSection.ColumnName = "RefSpecSection";
				colvarRefSpecSection.DataType = DbType.AnsiString;
				colvarRefSpecSection.MaxLength = 50;
				colvarRefSpecSection.AutoIncrement = false;
				colvarRefSpecSection.IsNullable = true;
				colvarRefSpecSection.IsPrimaryKey = false;
				colvarRefSpecSection.IsForeignKey = false;
				colvarRefSpecSection.IsReadOnly = false;
				colvarRefSpecSection.DefaultSetting = @"";
				colvarRefSpecSection.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRefSpecSection);
				
				TableSchema.TableColumn colvarRefOther = new TableSchema.TableColumn(schema);
				colvarRefOther.ColumnName = "RefOther";
				colvarRefOther.DataType = DbType.AnsiString;
				colvarRefOther.MaxLength = 50;
				colvarRefOther.AutoIncrement = false;
				colvarRefOther.IsNullable = true;
				colvarRefOther.IsPrimaryKey = false;
				colvarRefOther.IsForeignKey = false;
				colvarRefOther.IsReadOnly = false;
				colvarRefOther.DefaultSetting = @"";
				colvarRefOther.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRefOther);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.AnsiString;
				colvarStatus.MaxLength = 50;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = true;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarPMAssigned = new TableSchema.TableColumn(schema);
				colvarPMAssigned.ColumnName = "PMAssigned";
				colvarPMAssigned.DataType = DbType.AnsiString;
				colvarPMAssigned.MaxLength = 50;
				colvarPMAssigned.AutoIncrement = false;
				colvarPMAssigned.IsNullable = true;
				colvarPMAssigned.IsPrimaryKey = false;
				colvarPMAssigned.IsForeignKey = false;
				colvarPMAssigned.IsReadOnly = false;
				colvarPMAssigned.DefaultSetting = @"";
				colvarPMAssigned.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMAssigned);
				
				TableSchema.TableColumn colvarPMUserID = new TableSchema.TableColumn(schema);
				colvarPMUserID.ColumnName = "PMUserID";
				colvarPMUserID.DataType = DbType.Int32;
				colvarPMUserID.MaxLength = 0;
				colvarPMUserID.AutoIncrement = false;
				colvarPMUserID.IsNullable = true;
				colvarPMUserID.IsPrimaryKey = false;
				colvarPMUserID.IsForeignKey = false;
				colvarPMUserID.IsReadOnly = false;
				colvarPMUserID.DefaultSetting = @"";
				colvarPMUserID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPMUserID);
				
				TableSchema.TableColumn colvarUpdated = new TableSchema.TableColumn(schema);
				colvarUpdated.ColumnName = "Updated";
				colvarUpdated.DataType = DbType.DateTime;
				colvarUpdated.MaxLength = 0;
				colvarUpdated.AutoIncrement = false;
				colvarUpdated.IsNullable = true;
				colvarUpdated.IsPrimaryKey = false;
				colvarUpdated.IsForeignKey = false;
				colvarUpdated.IsReadOnly = false;
				colvarUpdated.DefaultSetting = @"";
				colvarUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdated);
				
				TableSchema.TableColumn colvarUpdatedBy = new TableSchema.TableColumn(schema);
				colvarUpdatedBy.ColumnName = "UpdatedBy";
				colvarUpdatedBy.DataType = DbType.AnsiString;
				colvarUpdatedBy.MaxLength = 50;
				colvarUpdatedBy.AutoIncrement = false;
				colvarUpdatedBy.IsNullable = true;
				colvarUpdatedBy.IsPrimaryKey = false;
				colvarUpdatedBy.IsForeignKey = false;
				colvarUpdatedBy.IsReadOnly = false;
				colvarUpdatedBy.DefaultSetting = @"";
				colvarUpdatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedBy);
				
				TableSchema.TableColumn colvarUpdatedByID = new TableSchema.TableColumn(schema);
				colvarUpdatedByID.ColumnName = "UpdatedByID";
				colvarUpdatedByID.DataType = DbType.Int32;
				colvarUpdatedByID.MaxLength = 0;
				colvarUpdatedByID.AutoIncrement = false;
				colvarUpdatedByID.IsNullable = true;
				colvarUpdatedByID.IsPrimaryKey = false;
				colvarUpdatedByID.IsForeignKey = false;
				colvarUpdatedByID.IsReadOnly = false;
				colvarUpdatedByID.DefaultSetting = @"";
				colvarUpdatedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedByID);
				
				TableSchema.TableColumn colvarClosed = new TableSchema.TableColumn(schema);
				colvarClosed.ColumnName = "Closed";
				colvarClosed.DataType = DbType.AnsiString;
				colvarClosed.MaxLength = 10;
				colvarClosed.AutoIncrement = false;
				colvarClosed.IsNullable = true;
				colvarClosed.IsPrimaryKey = false;
				colvarClosed.IsForeignKey = false;
				colvarClosed.IsReadOnly = false;
				
						colvarClosed.DefaultSetting = @"((0))";
				colvarClosed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClosed);
				
				TableSchema.TableColumn colvarSubmitted = new TableSchema.TableColumn(schema);
				colvarSubmitted.ColumnName = "Submitted";
				colvarSubmitted.DataType = DbType.DateTime;
				colvarSubmitted.MaxLength = 0;
				colvarSubmitted.AutoIncrement = false;
				colvarSubmitted.IsNullable = true;
				colvarSubmitted.IsPrimaryKey = false;
				colvarSubmitted.IsForeignKey = false;
				colvarSubmitted.IsReadOnly = false;
				colvarSubmitted.DefaultSetting = @"";
				colvarSubmitted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubmitted);
				
				TableSchema.TableColumn colvarSubmittedBy = new TableSchema.TableColumn(schema);
				colvarSubmittedBy.ColumnName = "SubmittedBy";
				colvarSubmittedBy.DataType = DbType.AnsiString;
				colvarSubmittedBy.MaxLength = 25;
				colvarSubmittedBy.AutoIncrement = false;
				colvarSubmittedBy.IsNullable = true;
				colvarSubmittedBy.IsPrimaryKey = false;
				colvarSubmittedBy.IsForeignKey = false;
				colvarSubmittedBy.IsReadOnly = false;
				colvarSubmittedBy.DefaultSetting = @"";
				colvarSubmittedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubmittedBy);
				
				TableSchema.TableColumn colvarSubmittedByID = new TableSchema.TableColumn(schema);
				colvarSubmittedByID.ColumnName = "SubmittedByID";
				colvarSubmittedByID.DataType = DbType.Int32;
				colvarSubmittedByID.MaxLength = 0;
				colvarSubmittedByID.AutoIncrement = false;
				colvarSubmittedByID.IsNullable = true;
				colvarSubmittedByID.IsPrimaryKey = false;
				colvarSubmittedByID.IsForeignKey = false;
				colvarSubmittedByID.IsReadOnly = false;
				colvarSubmittedByID.DefaultSetting = @"";
				colvarSubmittedByID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubmittedByID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["VeritasInfo"].AddSchema("PM_RFI",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("ProjectID")]
		[Bindable(true)]
		public int ProjectID 
		{
			get { return GetColumnValue<int>(Columns.ProjectID); }
			set { SetColumnValue(Columns.ProjectID, value); }
		}
		  
		[XmlAttribute("ProjectName")]
		[Bindable(true)]
		public string ProjectName 
		{
			get { return GetColumnValue<string>(Columns.ProjectName); }
			set { SetColumnValue(Columns.ProjectName, value); }
		}
		  
		[XmlAttribute("CoreconID")]
		[Bindable(true)]
		public string CoreconID 
		{
			get { return GetColumnValue<string>(Columns.CoreconID); }
			set { SetColumnValue(Columns.CoreconID, value); }
		}
		  
		[XmlAttribute("Subject")]
		[Bindable(true)]
		public string Subject 
		{
			get { return GetColumnValue<string>(Columns.Subject); }
			set { SetColumnValue(Columns.Subject, value); }
		}
		  
		[XmlAttribute("Priority")]
		[Bindable(true)]
		public string Priority 
		{
			get { return GetColumnValue<string>(Columns.Priority); }
			set { SetColumnValue(Columns.Priority, value); }
		}
		  
		[XmlAttribute("Request")]
		[Bindable(true)]
		public string Request 
		{
			get { return GetColumnValue<string>(Columns.Request); }
			set { SetColumnValue(Columns.Request, value); }
		}
		  
		[XmlAttribute("Suggestion")]
		[Bindable(true)]
		public string Suggestion 
		{
			get { return GetColumnValue<string>(Columns.Suggestion); }
			set { SetColumnValue(Columns.Suggestion, value); }
		}
		  
		[XmlAttribute("Response")]
		[Bindable(true)]
		public string Response 
		{
			get { return GetColumnValue<string>(Columns.Response); }
			set { SetColumnValue(Columns.Response, value); }
		}
		  
		[XmlAttribute("RefDrawingNumber")]
		[Bindable(true)]
		public string RefDrawingNumber 
		{
			get { return GetColumnValue<string>(Columns.RefDrawingNumber); }
			set { SetColumnValue(Columns.RefDrawingNumber, value); }
		}
		  
		[XmlAttribute("RefLocation")]
		[Bindable(true)]
		public string RefLocation 
		{
			get { return GetColumnValue<string>(Columns.RefLocation); }
			set { SetColumnValue(Columns.RefLocation, value); }
		}
		  
		[XmlAttribute("RefSpecSection")]
		[Bindable(true)]
		public string RefSpecSection 
		{
			get { return GetColumnValue<string>(Columns.RefSpecSection); }
			set { SetColumnValue(Columns.RefSpecSection, value); }
		}
		  
		[XmlAttribute("RefOther")]
		[Bindable(true)]
		public string RefOther 
		{
			get { return GetColumnValue<string>(Columns.RefOther); }
			set { SetColumnValue(Columns.RefOther, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public string Status 
		{
			get { return GetColumnValue<string>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("PMAssigned")]
		[Bindable(true)]
		public string PMAssigned 
		{
			get { return GetColumnValue<string>(Columns.PMAssigned); }
			set { SetColumnValue(Columns.PMAssigned, value); }
		}
		  
		[XmlAttribute("PMUserID")]
		[Bindable(true)]
		public int? PMUserID 
		{
			get { return GetColumnValue<int?>(Columns.PMUserID); }
			set { SetColumnValue(Columns.PMUserID, value); }
		}
		  
		[XmlAttribute("Updated")]
		[Bindable(true)]
		public DateTime? Updated 
		{
			get { return GetColumnValue<DateTime?>(Columns.Updated); }
			set { SetColumnValue(Columns.Updated, value); }
		}
		  
		[XmlAttribute("UpdatedBy")]
		[Bindable(true)]
		public string UpdatedBy 
		{
			get { return GetColumnValue<string>(Columns.UpdatedBy); }
			set { SetColumnValue(Columns.UpdatedBy, value); }
		}
		  
		[XmlAttribute("UpdatedByID")]
		[Bindable(true)]
		public int? UpdatedByID 
		{
			get { return GetColumnValue<int?>(Columns.UpdatedByID); }
			set { SetColumnValue(Columns.UpdatedByID, value); }
		}
		  
		[XmlAttribute("Closed")]
		[Bindable(true)]
		public string Closed 
		{
			get { return GetColumnValue<string>(Columns.Closed); }
			set { SetColumnValue(Columns.Closed, value); }
		}
		  
		[XmlAttribute("Submitted")]
		[Bindable(true)]
		public DateTime? Submitted 
		{
			get { return GetColumnValue<DateTime?>(Columns.Submitted); }
			set { SetColumnValue(Columns.Submitted, value); }
		}
		  
		[XmlAttribute("SubmittedBy")]
		[Bindable(true)]
		public string SubmittedBy 
		{
			get { return GetColumnValue<string>(Columns.SubmittedBy); }
			set { SetColumnValue(Columns.SubmittedBy, value); }
		}
		  
		[XmlAttribute("SubmittedByID")]
		[Bindable(true)]
		public int? SubmittedByID 
		{
			get { return GetColumnValue<int?>(Columns.SubmittedByID); }
			set { SetColumnValue(Columns.SubmittedByID, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varProjectID,string varProjectName,string varCoreconID,string varSubject,string varPriority,string varRequest,string varSuggestion,string varResponse,string varRefDrawingNumber,string varRefLocation,string varRefSpecSection,string varRefOther,string varStatus,string varPMAssigned,int? varPMUserID,DateTime? varUpdated,string varUpdatedBy,int? varUpdatedByID,string varClosed,DateTime? varSubmitted,string varSubmittedBy,int? varSubmittedByID)
		{
			Rfi item = new Rfi();
			
			item.ProjectID = varProjectID;
			
			item.ProjectName = varProjectName;
			
			item.CoreconID = varCoreconID;
			
			item.Subject = varSubject;
			
			item.Priority = varPriority;
			
			item.Request = varRequest;
			
			item.Suggestion = varSuggestion;
			
			item.Response = varResponse;
			
			item.RefDrawingNumber = varRefDrawingNumber;
			
			item.RefLocation = varRefLocation;
			
			item.RefSpecSection = varRefSpecSection;
			
			item.RefOther = varRefOther;
			
			item.Status = varStatus;
			
			item.PMAssigned = varPMAssigned;
			
			item.PMUserID = varPMUserID;
			
			item.Updated = varUpdated;
			
			item.UpdatedBy = varUpdatedBy;
			
			item.UpdatedByID = varUpdatedByID;
			
			item.Closed = varClosed;
			
			item.Submitted = varSubmitted;
			
			item.SubmittedBy = varSubmittedBy;
			
			item.SubmittedByID = varSubmittedByID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varProjectID,string varProjectName,string varCoreconID,string varSubject,string varPriority,string varRequest,string varSuggestion,string varResponse,string varRefDrawingNumber,string varRefLocation,string varRefSpecSection,string varRefOther,string varStatus,string varPMAssigned,int? varPMUserID,DateTime? varUpdated,string varUpdatedBy,int? varUpdatedByID,string varClosed,DateTime? varSubmitted,string varSubmittedBy,int? varSubmittedByID)
		{
			Rfi item = new Rfi();
			
				item.Id = varId;
			
				item.ProjectID = varProjectID;
			
				item.ProjectName = varProjectName;
			
				item.CoreconID = varCoreconID;
			
				item.Subject = varSubject;
			
				item.Priority = varPriority;
			
				item.Request = varRequest;
			
				item.Suggestion = varSuggestion;
			
				item.Response = varResponse;
			
				item.RefDrawingNumber = varRefDrawingNumber;
			
				item.RefLocation = varRefLocation;
			
				item.RefSpecSection = varRefSpecSection;
			
				item.RefOther = varRefOther;
			
				item.Status = varStatus;
			
				item.PMAssigned = varPMAssigned;
			
				item.PMUserID = varPMUserID;
			
				item.Updated = varUpdated;
			
				item.UpdatedBy = varUpdatedBy;
			
				item.UpdatedByID = varUpdatedByID;
			
				item.Closed = varClosed;
			
				item.Submitted = varSubmitted;
			
				item.SubmittedBy = varSubmittedBy;
			
				item.SubmittedByID = varSubmittedByID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CoreconIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SubjectColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PriorityColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RequestColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SuggestionColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ResponseColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn RefDrawingNumberColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn RefLocationColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn RefSpecSectionColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn RefOtherColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn PMAssignedColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn PMUserIDColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedByColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedByIDColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ClosedColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn SubmittedColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn SubmittedByColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn SubmittedByIDColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string ProjectID = @"ProjectID";
			 public static string ProjectName = @"ProjectName";
			 public static string CoreconID = @"CoreconID";
			 public static string Subject = @"Subject";
			 public static string Priority = @"Priority";
			 public static string Request = @"Request";
			 public static string Suggestion = @"Suggestion";
			 public static string Response = @"Response";
			 public static string RefDrawingNumber = @"RefDrawingNumber";
			 public static string RefLocation = @"RefLocation";
			 public static string RefSpecSection = @"RefSpecSection";
			 public static string RefOther = @"RefOther";
			 public static string Status = @"Status";
			 public static string PMAssigned = @"PMAssigned";
			 public static string PMUserID = @"PMUserID";
			 public static string Updated = @"Updated";
			 public static string UpdatedBy = @"UpdatedBy";
			 public static string UpdatedByID = @"UpdatedByID";
			 public static string Closed = @"Closed";
			 public static string Submitted = @"Submitted";
			 public static string SubmittedBy = @"SubmittedBy";
			 public static string SubmittedByID = @"SubmittedByID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
