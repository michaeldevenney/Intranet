using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the WorkTracking class.
	/// </summary>
    [Serializable]
	public partial class WorkTrackingCollection : ActiveList<WorkTracking, WorkTrackingCollection>
	{	   
		public WorkTrackingCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>WorkTrackingCollection</returns>
		public WorkTrackingCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                WorkTracking o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the WorkTracking table.
	/// </summary>
	[Serializable]
	public partial class WorkTracking : ActiveRecord<WorkTracking>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public WorkTracking()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public WorkTracking(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public WorkTracking(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public WorkTracking(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("WorkTracking", TableType.Table, DataService.GetInstance("VeritasInfo"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarDateWorked = new TableSchema.TableColumn(schema);
				colvarDateWorked.ColumnName = "DateWorked";
				colvarDateWorked.DataType = DbType.DateTime;
				colvarDateWorked.MaxLength = 0;
				colvarDateWorked.AutoIncrement = false;
				colvarDateWorked.IsNullable = true;
				colvarDateWorked.IsPrimaryKey = false;
				colvarDateWorked.IsForeignKey = false;
				colvarDateWorked.IsReadOnly = false;
				colvarDateWorked.DefaultSetting = @"";
				colvarDateWorked.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateWorked);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 115;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarHours = new TableSchema.TableColumn(schema);
				colvarHours.ColumnName = "Hours";
				colvarHours.DataType = DbType.Decimal;
				colvarHours.MaxLength = 0;
				colvarHours.AutoIncrement = false;
				colvarHours.IsNullable = true;
				colvarHours.IsPrimaryKey = false;
				colvarHours.IsForeignKey = false;
				colvarHours.IsReadOnly = false;
				colvarHours.DefaultSetting = @"";
				colvarHours.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHours);
				
				TableSchema.TableColumn colvarComments = new TableSchema.TableColumn(schema);
				colvarComments.ColumnName = "Comments";
				colvarComments.DataType = DbType.AnsiString;
				colvarComments.MaxLength = -1;
				colvarComments.AutoIncrement = false;
				colvarComments.IsNullable = true;
				colvarComments.IsPrimaryKey = false;
				colvarComments.IsForeignKey = false;
				colvarComments.IsReadOnly = false;
				colvarComments.DefaultSetting = @"";
				colvarComments.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComments);
				
				TableSchema.TableColumn colvarPerson = new TableSchema.TableColumn(schema);
				colvarPerson.ColumnName = "Person";
				colvarPerson.DataType = DbType.AnsiString;
				colvarPerson.MaxLength = 50;
				colvarPerson.AutoIncrement = false;
				colvarPerson.IsNullable = true;
				colvarPerson.IsPrimaryKey = false;
				colvarPerson.IsForeignKey = false;
				colvarPerson.IsReadOnly = false;
				colvarPerson.DefaultSetting = @"";
				colvarPerson.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPerson);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["VeritasInfo"].AddSchema("WorkTracking",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("DateWorked")]
		[Bindable(true)]
		public DateTime? DateWorked 
		{
			get { return GetColumnValue<DateTime?>(Columns.DateWorked); }
			set { SetColumnValue(Columns.DateWorked, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("Hours")]
		[Bindable(true)]
		public decimal? Hours 
		{
			get { return GetColumnValue<decimal?>(Columns.Hours); }
			set { SetColumnValue(Columns.Hours, value); }
		}
		  
		[XmlAttribute("Comments")]
		[Bindable(true)]
		public string Comments 
		{
			get { return GetColumnValue<string>(Columns.Comments); }
			set { SetColumnValue(Columns.Comments, value); }
		}
		  
		[XmlAttribute("Person")]
		[Bindable(true)]
		public string Person 
		{
			get { return GetColumnValue<string>(Columns.Person); }
			set { SetColumnValue(Columns.Person, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(DateTime? varDateWorked,string varDescription,decimal? varHours,string varComments,string varPerson)
		{
			WorkTracking item = new WorkTracking();
			
			item.DateWorked = varDateWorked;
			
			item.Description = varDescription;
			
			item.Hours = varHours;
			
			item.Comments = varComments;
			
			item.Person = varPerson;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,DateTime? varDateWorked,string varDescription,decimal? varHours,string varComments,string varPerson)
		{
			WorkTracking item = new WorkTracking();
			
				item.Id = varId;
			
				item.DateWorked = varDateWorked;
			
				item.Description = varDescription;
			
				item.Hours = varHours;
			
				item.Comments = varComments;
			
				item.Person = varPerson;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DateWorkedColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn HoursColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CommentsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PersonColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string DateWorked = @"DateWorked";
			 public static string Description = @"Description";
			 public static string Hours = @"Hours";
			 public static string Comments = @"Comments";
			 public static string Person = @"Person";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
