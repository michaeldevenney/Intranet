using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the Estimate class.
	/// </summary>
    [Serializable]
	public partial class EstimateCollection : ActiveList<Estimate, EstimateCollection>
	{	   
		public EstimateCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>EstimateCollection</returns>
		public EstimateCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Estimate o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Estimates table.
	/// </summary>
	[Serializable]
	public partial class Estimate : ActiveRecord<Estimate>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Estimate()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Estimate(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Estimate(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Estimate(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Estimates", TableType.Table, DataService.GetInstance("VeritasInfo"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarJobName = new TableSchema.TableColumn(schema);
				colvarJobName.ColumnName = "JobName";
				colvarJobName.DataType = DbType.Int32;
				colvarJobName.MaxLength = 0;
				colvarJobName.AutoIncrement = false;
				colvarJobName.IsNullable = true;
				colvarJobName.IsPrimaryKey = false;
				colvarJobName.IsForeignKey = false;
				colvarJobName.IsReadOnly = false;
				colvarJobName.DefaultSetting = @"";
				colvarJobName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarJobName);
				
				TableSchema.TableColumn colvarEstimateNumber = new TableSchema.TableColumn(schema);
				colvarEstimateNumber.ColumnName = "EstimateNumber";
				colvarEstimateNumber.DataType = DbType.AnsiString;
				colvarEstimateNumber.MaxLength = 50;
				colvarEstimateNumber.AutoIncrement = false;
				colvarEstimateNumber.IsNullable = true;
				colvarEstimateNumber.IsPrimaryKey = false;
				colvarEstimateNumber.IsForeignKey = false;
				colvarEstimateNumber.IsReadOnly = false;
				colvarEstimateNumber.DefaultSetting = @"";
				colvarEstimateNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateNumber);
				
				TableSchema.TableColumn colvarContact = new TableSchema.TableColumn(schema);
				colvarContact.ColumnName = "Contact";
				colvarContact.DataType = DbType.AnsiString;
				colvarContact.MaxLength = 50;
				colvarContact.AutoIncrement = false;
				colvarContact.IsNullable = true;
				colvarContact.IsPrimaryKey = false;
				colvarContact.IsForeignKey = false;
				colvarContact.IsReadOnly = false;
				colvarContact.DefaultSetting = @"";
				colvarContact.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContact);
				
				TableSchema.TableColumn colvarContactEmail = new TableSchema.TableColumn(schema);
				colvarContactEmail.ColumnName = "ContactEmail";
				colvarContactEmail.DataType = DbType.AnsiString;
				colvarContactEmail.MaxLength = 50;
				colvarContactEmail.AutoIncrement = false;
				colvarContactEmail.IsNullable = true;
				colvarContactEmail.IsPrimaryKey = false;
				colvarContactEmail.IsForeignKey = false;
				colvarContactEmail.IsReadOnly = false;
				colvarContactEmail.DefaultSetting = @"";
				colvarContactEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactEmail);
				
				TableSchema.TableColumn colvarReceived = new TableSchema.TableColumn(schema);
				colvarReceived.ColumnName = "Received";
				colvarReceived.DataType = DbType.DateTime;
				colvarReceived.MaxLength = 0;
				colvarReceived.AutoIncrement = false;
				colvarReceived.IsNullable = true;
				colvarReceived.IsPrimaryKey = false;
				colvarReceived.IsForeignKey = false;
				colvarReceived.IsReadOnly = false;
				colvarReceived.DefaultSetting = @"";
				colvarReceived.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReceived);
				
				TableSchema.TableColumn colvarEstimator = new TableSchema.TableColumn(schema);
				colvarEstimator.ColumnName = "Estimator";
				colvarEstimator.DataType = DbType.Int32;
				colvarEstimator.MaxLength = 0;
				colvarEstimator.AutoIncrement = false;
				colvarEstimator.IsNullable = true;
				colvarEstimator.IsPrimaryKey = false;
				colvarEstimator.IsForeignKey = false;
				colvarEstimator.IsReadOnly = false;
				colvarEstimator.DefaultSetting = @"";
				colvarEstimator.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimator);
				
				TableSchema.TableColumn colvarEstimatesDirectory = new TableSchema.TableColumn(schema);
				colvarEstimatesDirectory.ColumnName = "EstimatesDirectory";
				colvarEstimatesDirectory.DataType = DbType.AnsiString;
				colvarEstimatesDirectory.MaxLength = 500;
				colvarEstimatesDirectory.AutoIncrement = false;
				colvarEstimatesDirectory.IsNullable = true;
				colvarEstimatesDirectory.IsPrimaryKey = false;
				colvarEstimatesDirectory.IsForeignKey = false;
				colvarEstimatesDirectory.IsReadOnly = false;
				colvarEstimatesDirectory.DefaultSetting = @"";
				colvarEstimatesDirectory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimatesDirectory);
				
				TableSchema.TableColumn colvarProspectDirectory = new TableSchema.TableColumn(schema);
				colvarProspectDirectory.ColumnName = "ProspectDirectory";
				colvarProspectDirectory.DataType = DbType.AnsiString;
				colvarProspectDirectory.MaxLength = 500;
				colvarProspectDirectory.AutoIncrement = false;
				colvarProspectDirectory.IsNullable = true;
				colvarProspectDirectory.IsPrimaryKey = false;
				colvarProspectDirectory.IsForeignKey = false;
				colvarProspectDirectory.IsReadOnly = false;
				colvarProspectDirectory.DefaultSetting = @"";
				colvarProspectDirectory.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProspectDirectory);
				
				TableSchema.TableColumn colvarResponseRequestedBy = new TableSchema.TableColumn(schema);
				colvarResponseRequestedBy.ColumnName = "ResponseRequestedBy";
				colvarResponseRequestedBy.DataType = DbType.DateTime;
				colvarResponseRequestedBy.MaxLength = 0;
				colvarResponseRequestedBy.AutoIncrement = false;
				colvarResponseRequestedBy.IsNullable = true;
				colvarResponseRequestedBy.IsPrimaryKey = false;
				colvarResponseRequestedBy.IsForeignKey = false;
				colvarResponseRequestedBy.IsReadOnly = false;
				colvarResponseRequestedBy.DefaultSetting = @"";
				colvarResponseRequestedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarResponseRequestedBy);
				
				TableSchema.TableColumn colvarMoreInfoNeeded = new TableSchema.TableColumn(schema);
				colvarMoreInfoNeeded.ColumnName = "MoreInfoNeeded";
				colvarMoreInfoNeeded.DataType = DbType.Boolean;
				colvarMoreInfoNeeded.MaxLength = 0;
				colvarMoreInfoNeeded.AutoIncrement = false;
				colvarMoreInfoNeeded.IsNullable = false;
				colvarMoreInfoNeeded.IsPrimaryKey = false;
				colvarMoreInfoNeeded.IsForeignKey = false;
				colvarMoreInfoNeeded.IsReadOnly = false;
				
						colvarMoreInfoNeeded.DefaultSetting = @"((0))";
				colvarMoreInfoNeeded.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoreInfoNeeded);
				
				TableSchema.TableColumn colvarMoreInfoDate = new TableSchema.TableColumn(schema);
				colvarMoreInfoDate.ColumnName = "MoreInfoDate";
				colvarMoreInfoDate.DataType = DbType.DateTime;
				colvarMoreInfoDate.MaxLength = 0;
				colvarMoreInfoDate.AutoIncrement = false;
				colvarMoreInfoDate.IsNullable = true;
				colvarMoreInfoDate.IsPrimaryKey = false;
				colvarMoreInfoDate.IsForeignKey = false;
				colvarMoreInfoDate.IsReadOnly = false;
				colvarMoreInfoDate.DefaultSetting = @"";
				colvarMoreInfoDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMoreInfoDate);
				
				TableSchema.TableColumn colvarInitialDrawing = new TableSchema.TableColumn(schema);
				colvarInitialDrawing.ColumnName = "InitialDrawing";
				colvarInitialDrawing.DataType = DbType.Boolean;
				colvarInitialDrawing.MaxLength = 0;
				colvarInitialDrawing.AutoIncrement = false;
				colvarInitialDrawing.IsNullable = false;
				colvarInitialDrawing.IsPrimaryKey = false;
				colvarInitialDrawing.IsForeignKey = false;
				colvarInitialDrawing.IsReadOnly = false;
				
						colvarInitialDrawing.DefaultSetting = @"((0))";
				colvarInitialDrawing.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInitialDrawing);
				
				TableSchema.TableColumn colvarInitialDrawingDate = new TableSchema.TableColumn(schema);
				colvarInitialDrawingDate.ColumnName = "InitialDrawingDate";
				colvarInitialDrawingDate.DataType = DbType.DateTime;
				colvarInitialDrawingDate.MaxLength = 0;
				colvarInitialDrawingDate.AutoIncrement = false;
				colvarInitialDrawingDate.IsNullable = true;
				colvarInitialDrawingDate.IsPrimaryKey = false;
				colvarInitialDrawingDate.IsForeignKey = false;
				colvarInitialDrawingDate.IsReadOnly = false;
				colvarInitialDrawingDate.DefaultSetting = @"";
				colvarInitialDrawingDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInitialDrawingDate);
				
				TableSchema.TableColumn colvarThicknesses = new TableSchema.TableColumn(schema);
				colvarThicknesses.ColumnName = "Thicknesses";
				colvarThicknesses.DataType = DbType.Boolean;
				colvarThicknesses.MaxLength = 0;
				colvarThicknesses.AutoIncrement = false;
				colvarThicknesses.IsNullable = false;
				colvarThicknesses.IsPrimaryKey = false;
				colvarThicknesses.IsForeignKey = false;
				colvarThicknesses.IsReadOnly = false;
				
						colvarThicknesses.DefaultSetting = @"((0))";
				colvarThicknesses.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThicknesses);
				
				TableSchema.TableColumn colvarThicknessesDate = new TableSchema.TableColumn(schema);
				colvarThicknessesDate.ColumnName = "ThicknessesDate";
				colvarThicknessesDate.DataType = DbType.DateTime;
				colvarThicknessesDate.MaxLength = 0;
				colvarThicknessesDate.AutoIncrement = false;
				colvarThicknessesDate.IsNullable = true;
				colvarThicknessesDate.IsPrimaryKey = false;
				colvarThicknessesDate.IsForeignKey = false;
				colvarThicknessesDate.IsReadOnly = false;
				colvarThicknessesDate.DefaultSetting = @"";
				colvarThicknessesDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThicknessesDate);
				
				TableSchema.TableColumn colvarAutoCAD = new TableSchema.TableColumn(schema);
				colvarAutoCAD.ColumnName = "AutoCAD";
				colvarAutoCAD.DataType = DbType.Boolean;
				colvarAutoCAD.MaxLength = 0;
				colvarAutoCAD.AutoIncrement = false;
				colvarAutoCAD.IsNullable = false;
				colvarAutoCAD.IsPrimaryKey = false;
				colvarAutoCAD.IsForeignKey = false;
				colvarAutoCAD.IsReadOnly = false;
				
						colvarAutoCAD.DefaultSetting = @"((0))";
				colvarAutoCAD.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAutoCAD);
				
				TableSchema.TableColumn colvarAutoCADDate = new TableSchema.TableColumn(schema);
				colvarAutoCADDate.ColumnName = "AutoCADDate";
				colvarAutoCADDate.DataType = DbType.DateTime;
				colvarAutoCADDate.MaxLength = 0;
				colvarAutoCADDate.AutoIncrement = false;
				colvarAutoCADDate.IsNullable = true;
				colvarAutoCADDate.IsPrimaryKey = false;
				colvarAutoCADDate.IsForeignKey = false;
				colvarAutoCADDate.IsReadOnly = false;
				colvarAutoCADDate.DefaultSetting = @"";
				colvarAutoCADDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAutoCADDate);
				
				TableSchema.TableColumn colvarTakeoff = new TableSchema.TableColumn(schema);
				colvarTakeoff.ColumnName = "Takeoff";
				colvarTakeoff.DataType = DbType.Boolean;
				colvarTakeoff.MaxLength = 0;
				colvarTakeoff.AutoIncrement = false;
				colvarTakeoff.IsNullable = false;
				colvarTakeoff.IsPrimaryKey = false;
				colvarTakeoff.IsForeignKey = false;
				colvarTakeoff.IsReadOnly = false;
				
						colvarTakeoff.DefaultSetting = @"((0))";
				colvarTakeoff.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTakeoff);
				
				TableSchema.TableColumn colvarTakeoffDate = new TableSchema.TableColumn(schema);
				colvarTakeoffDate.ColumnName = "TakeoffDate";
				colvarTakeoffDate.DataType = DbType.DateTime;
				colvarTakeoffDate.MaxLength = 0;
				colvarTakeoffDate.AutoIncrement = false;
				colvarTakeoffDate.IsNullable = true;
				colvarTakeoffDate.IsPrimaryKey = false;
				colvarTakeoffDate.IsForeignKey = false;
				colvarTakeoffDate.IsReadOnly = false;
				colvarTakeoffDate.DefaultSetting = @"";
				colvarTakeoffDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTakeoffDate);
				
				TableSchema.TableColumn colvarEstimateCompleted = new TableSchema.TableColumn(schema);
				colvarEstimateCompleted.ColumnName = "EstimateCompleted";
				colvarEstimateCompleted.DataType = DbType.Boolean;
				colvarEstimateCompleted.MaxLength = 0;
				colvarEstimateCompleted.AutoIncrement = false;
				colvarEstimateCompleted.IsNullable = false;
				colvarEstimateCompleted.IsPrimaryKey = false;
				colvarEstimateCompleted.IsForeignKey = false;
				colvarEstimateCompleted.IsReadOnly = false;
				
						colvarEstimateCompleted.DefaultSetting = @"((0))";
				colvarEstimateCompleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateCompleted);
				
				TableSchema.TableColumn colvarEstimateCompletedDate = new TableSchema.TableColumn(schema);
				colvarEstimateCompletedDate.ColumnName = "EstimateCompletedDate";
				colvarEstimateCompletedDate.DataType = DbType.DateTime;
				colvarEstimateCompletedDate.MaxLength = 0;
				colvarEstimateCompletedDate.AutoIncrement = false;
				colvarEstimateCompletedDate.IsNullable = true;
				colvarEstimateCompletedDate.IsPrimaryKey = false;
				colvarEstimateCompletedDate.IsForeignKey = false;
				colvarEstimateCompletedDate.IsReadOnly = false;
				colvarEstimateCompletedDate.DefaultSetting = @"";
				colvarEstimateCompletedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateCompletedDate);
				
				TableSchema.TableColumn colvarEstimateReview = new TableSchema.TableColumn(schema);
				colvarEstimateReview.ColumnName = "EstimateReview";
				colvarEstimateReview.DataType = DbType.Boolean;
				colvarEstimateReview.MaxLength = 0;
				colvarEstimateReview.AutoIncrement = false;
				colvarEstimateReview.IsNullable = false;
				colvarEstimateReview.IsPrimaryKey = false;
				colvarEstimateReview.IsForeignKey = false;
				colvarEstimateReview.IsReadOnly = false;
				
						colvarEstimateReview.DefaultSetting = @"((0))";
				colvarEstimateReview.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateReview);
				
				TableSchema.TableColumn colvarEstimateReviewDate = new TableSchema.TableColumn(schema);
				colvarEstimateReviewDate.ColumnName = "EstimateReviewDate";
				colvarEstimateReviewDate.DataType = DbType.DateTime;
				colvarEstimateReviewDate.MaxLength = 0;
				colvarEstimateReviewDate.AutoIncrement = false;
				colvarEstimateReviewDate.IsNullable = true;
				colvarEstimateReviewDate.IsPrimaryKey = false;
				colvarEstimateReviewDate.IsForeignKey = false;
				colvarEstimateReviewDate.IsReadOnly = false;
				colvarEstimateReviewDate.DefaultSetting = @"";
				colvarEstimateReviewDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateReviewDate);
				
				TableSchema.TableColumn colvarEstimateSent = new TableSchema.TableColumn(schema);
				colvarEstimateSent.ColumnName = "EstimateSent";
				colvarEstimateSent.DataType = DbType.Boolean;
				colvarEstimateSent.MaxLength = 0;
				colvarEstimateSent.AutoIncrement = false;
				colvarEstimateSent.IsNullable = false;
				colvarEstimateSent.IsPrimaryKey = false;
				colvarEstimateSent.IsForeignKey = false;
				colvarEstimateSent.IsReadOnly = false;
				
						colvarEstimateSent.DefaultSetting = @"((0))";
				colvarEstimateSent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateSent);
				
				TableSchema.TableColumn colvarEstimateSentDate = new TableSchema.TableColumn(schema);
				colvarEstimateSentDate.ColumnName = "EstimateSentDate";
				colvarEstimateSentDate.DataType = DbType.DateTime;
				colvarEstimateSentDate.MaxLength = 0;
				colvarEstimateSentDate.AutoIncrement = false;
				colvarEstimateSentDate.IsNullable = true;
				colvarEstimateSentDate.IsPrimaryKey = false;
				colvarEstimateSentDate.IsForeignKey = false;
				colvarEstimateSentDate.IsReadOnly = false;
				colvarEstimateSentDate.DefaultSetting = @"";
				colvarEstimateSentDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateSentDate);
				
				TableSchema.TableColumn colvarComplete = new TableSchema.TableColumn(schema);
				colvarComplete.ColumnName = "Complete";
				colvarComplete.DataType = DbType.Boolean;
				colvarComplete.MaxLength = 0;
				colvarComplete.AutoIncrement = false;
				colvarComplete.IsNullable = false;
				colvarComplete.IsPrimaryKey = false;
				colvarComplete.IsForeignKey = false;
				colvarComplete.IsReadOnly = false;
				
						colvarComplete.DefaultSetting = @"((0))";
				colvarComplete.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComplete);
				
				TableSchema.TableColumn colvarEstimateTotal = new TableSchema.TableColumn(schema);
				colvarEstimateTotal.ColumnName = "EstimateTotal";
				colvarEstimateTotal.DataType = DbType.Currency;
				colvarEstimateTotal.MaxLength = 0;
				colvarEstimateTotal.AutoIncrement = false;
				colvarEstimateTotal.IsNullable = false;
				colvarEstimateTotal.IsPrimaryKey = false;
				colvarEstimateTotal.IsForeignKey = false;
				colvarEstimateTotal.IsReadOnly = false;
				
						colvarEstimateTotal.DefaultSetting = @"((0))";
				colvarEstimateTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEstimateTotal);
				
				TableSchema.TableColumn colvarDoorsTotal = new TableSchema.TableColumn(schema);
				colvarDoorsTotal.ColumnName = "DoorsTotal";
				colvarDoorsTotal.DataType = DbType.Currency;
				colvarDoorsTotal.MaxLength = 0;
				colvarDoorsTotal.AutoIncrement = false;
				colvarDoorsTotal.IsNullable = false;
				colvarDoorsTotal.IsPrimaryKey = false;
				colvarDoorsTotal.IsForeignKey = false;
				colvarDoorsTotal.IsReadOnly = false;
				
						colvarDoorsTotal.DefaultSetting = @"((0))";
				colvarDoorsTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoorsTotal);
				
				TableSchema.TableColumn colvarInteriorsTotal = new TableSchema.TableColumn(schema);
				colvarInteriorsTotal.ColumnName = "InteriorsTotal";
				colvarInteriorsTotal.DataType = DbType.Currency;
				colvarInteriorsTotal.MaxLength = 0;
				colvarInteriorsTotal.AutoIncrement = false;
				colvarInteriorsTotal.IsNullable = false;
				colvarInteriorsTotal.IsPrimaryKey = false;
				colvarInteriorsTotal.IsForeignKey = false;
				colvarInteriorsTotal.IsReadOnly = false;
				
						colvarInteriorsTotal.DefaultSetting = @"((0))";
				colvarInteriorsTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInteriorsTotal);
				
				TableSchema.TableColumn colvarBunkerTotal = new TableSchema.TableColumn(schema);
				colvarBunkerTotal.ColumnName = "BunkerTotal";
				colvarBunkerTotal.DataType = DbType.Currency;
				colvarBunkerTotal.MaxLength = 0;
				colvarBunkerTotal.AutoIncrement = false;
				colvarBunkerTotal.IsNullable = false;
				colvarBunkerTotal.IsPrimaryKey = false;
				colvarBunkerTotal.IsForeignKey = false;
				colvarBunkerTotal.IsReadOnly = false;
				
						colvarBunkerTotal.DefaultSetting = @"((0))";
				colvarBunkerTotal.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBunkerTotal);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["VeritasInfo"].AddSchema("Estimates",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("JobName")]
		[Bindable(true)]
		public int? JobName 
		{
			get { return GetColumnValue<int?>(Columns.JobName); }
			set { SetColumnValue(Columns.JobName, value); }
		}
		  
		[XmlAttribute("EstimateNumber")]
		[Bindable(true)]
		public string EstimateNumber 
		{
			get { return GetColumnValue<string>(Columns.EstimateNumber); }
			set { SetColumnValue(Columns.EstimateNumber, value); }
		}
		  
		[XmlAttribute("Contact")]
		[Bindable(true)]
		public string Contact 
		{
			get { return GetColumnValue<string>(Columns.Contact); }
			set { SetColumnValue(Columns.Contact, value); }
		}
		  
		[XmlAttribute("ContactEmail")]
		[Bindable(true)]
		public string ContactEmail 
		{
			get { return GetColumnValue<string>(Columns.ContactEmail); }
			set { SetColumnValue(Columns.ContactEmail, value); }
		}
		  
		[XmlAttribute("Received")]
		[Bindable(true)]
		public DateTime? Received 
		{
			get { return GetColumnValue<DateTime?>(Columns.Received); }
			set { SetColumnValue(Columns.Received, value); }
		}
		  
		[XmlAttribute("Estimator")]
		[Bindable(true)]
		public int? Estimator 
		{
			get { return GetColumnValue<int?>(Columns.Estimator); }
			set { SetColumnValue(Columns.Estimator, value); }
		}
		  
		[XmlAttribute("EstimatesDirectory")]
		[Bindable(true)]
		public string EstimatesDirectory 
		{
			get { return GetColumnValue<string>(Columns.EstimatesDirectory); }
			set { SetColumnValue(Columns.EstimatesDirectory, value); }
		}
		  
		[XmlAttribute("ProspectDirectory")]
		[Bindable(true)]
		public string ProspectDirectory 
		{
			get { return GetColumnValue<string>(Columns.ProspectDirectory); }
			set { SetColumnValue(Columns.ProspectDirectory, value); }
		}
		  
		[XmlAttribute("ResponseRequestedBy")]
		[Bindable(true)]
		public DateTime? ResponseRequestedBy 
		{
			get { return GetColumnValue<DateTime?>(Columns.ResponseRequestedBy); }
			set { SetColumnValue(Columns.ResponseRequestedBy, value); }
		}
		  
		[XmlAttribute("MoreInfoNeeded")]
		[Bindable(true)]
		public bool MoreInfoNeeded 
		{
			get { return GetColumnValue<bool>(Columns.MoreInfoNeeded); }
			set { SetColumnValue(Columns.MoreInfoNeeded, value); }
		}
		  
		[XmlAttribute("MoreInfoDate")]
		[Bindable(true)]
		public DateTime? MoreInfoDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.MoreInfoDate); }
			set { SetColumnValue(Columns.MoreInfoDate, value); }
		}
		  
		[XmlAttribute("InitialDrawing")]
		[Bindable(true)]
		public bool InitialDrawing 
		{
			get { return GetColumnValue<bool>(Columns.InitialDrawing); }
			set { SetColumnValue(Columns.InitialDrawing, value); }
		}
		  
		[XmlAttribute("InitialDrawingDate")]
		[Bindable(true)]
		public DateTime? InitialDrawingDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.InitialDrawingDate); }
			set { SetColumnValue(Columns.InitialDrawingDate, value); }
		}
		  
		[XmlAttribute("Thicknesses")]
		[Bindable(true)]
		public bool Thicknesses 
		{
			get { return GetColumnValue<bool>(Columns.Thicknesses); }
			set { SetColumnValue(Columns.Thicknesses, value); }
		}
		  
		[XmlAttribute("ThicknessesDate")]
		[Bindable(true)]
		public DateTime? ThicknessesDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ThicknessesDate); }
			set { SetColumnValue(Columns.ThicknessesDate, value); }
		}
		  
		[XmlAttribute("AutoCAD")]
		[Bindable(true)]
		public bool AutoCAD 
		{
			get { return GetColumnValue<bool>(Columns.AutoCAD); }
			set { SetColumnValue(Columns.AutoCAD, value); }
		}
		  
		[XmlAttribute("AutoCADDate")]
		[Bindable(true)]
		public DateTime? AutoCADDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.AutoCADDate); }
			set { SetColumnValue(Columns.AutoCADDate, value); }
		}
		  
		[XmlAttribute("Takeoff")]
		[Bindable(true)]
		public bool Takeoff 
		{
			get { return GetColumnValue<bool>(Columns.Takeoff); }
			set { SetColumnValue(Columns.Takeoff, value); }
		}
		  
		[XmlAttribute("TakeoffDate")]
		[Bindable(true)]
		public DateTime? TakeoffDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.TakeoffDate); }
			set { SetColumnValue(Columns.TakeoffDate, value); }
		}
		  
		[XmlAttribute("EstimateCompleted")]
		[Bindable(true)]
		public bool EstimateCompleted 
		{
			get { return GetColumnValue<bool>(Columns.EstimateCompleted); }
			set { SetColumnValue(Columns.EstimateCompleted, value); }
		}
		  
		[XmlAttribute("EstimateCompletedDate")]
		[Bindable(true)]
		public DateTime? EstimateCompletedDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EstimateCompletedDate); }
			set { SetColumnValue(Columns.EstimateCompletedDate, value); }
		}
		  
		[XmlAttribute("EstimateReview")]
		[Bindable(true)]
		public bool EstimateReview 
		{
			get { return GetColumnValue<bool>(Columns.EstimateReview); }
			set { SetColumnValue(Columns.EstimateReview, value); }
		}
		  
		[XmlAttribute("EstimateReviewDate")]
		[Bindable(true)]
		public DateTime? EstimateReviewDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EstimateReviewDate); }
			set { SetColumnValue(Columns.EstimateReviewDate, value); }
		}
		  
		[XmlAttribute("EstimateSent")]
		[Bindable(true)]
		public bool EstimateSent 
		{
			get { return GetColumnValue<bool>(Columns.EstimateSent); }
			set { SetColumnValue(Columns.EstimateSent, value); }
		}
		  
		[XmlAttribute("EstimateSentDate")]
		[Bindable(true)]
		public DateTime? EstimateSentDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EstimateSentDate); }
			set { SetColumnValue(Columns.EstimateSentDate, value); }
		}
		  
		[XmlAttribute("Complete")]
		[Bindable(true)]
		public bool Complete 
		{
			get { return GetColumnValue<bool>(Columns.Complete); }
			set { SetColumnValue(Columns.Complete, value); }
		}
		  
		[XmlAttribute("EstimateTotal")]
		[Bindable(true)]
		public decimal EstimateTotal 
		{
			get { return GetColumnValue<decimal>(Columns.EstimateTotal); }
			set { SetColumnValue(Columns.EstimateTotal, value); }
		}
		  
		[XmlAttribute("DoorsTotal")]
		[Bindable(true)]
		public decimal DoorsTotal 
		{
			get { return GetColumnValue<decimal>(Columns.DoorsTotal); }
			set { SetColumnValue(Columns.DoorsTotal, value); }
		}
		  
		[XmlAttribute("InteriorsTotal")]
		[Bindable(true)]
		public decimal InteriorsTotal 
		{
			get { return GetColumnValue<decimal>(Columns.InteriorsTotal); }
			set { SetColumnValue(Columns.InteriorsTotal, value); }
		}
		  
		[XmlAttribute("BunkerTotal")]
		[Bindable(true)]
		public decimal BunkerTotal 
		{
			get { return GetColumnValue<decimal>(Columns.BunkerTotal); }
			set { SetColumnValue(Columns.BunkerTotal, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varJobName,string varEstimateNumber,string varContact,string varContactEmail,DateTime? varReceived,int? varEstimator,string varEstimatesDirectory,string varProspectDirectory,DateTime? varResponseRequestedBy,bool varMoreInfoNeeded,DateTime? varMoreInfoDate,bool varInitialDrawing,DateTime? varInitialDrawingDate,bool varThicknesses,DateTime? varThicknessesDate,bool varAutoCAD,DateTime? varAutoCADDate,bool varTakeoff,DateTime? varTakeoffDate,bool varEstimateCompleted,DateTime? varEstimateCompletedDate,bool varEstimateReview,DateTime? varEstimateReviewDate,bool varEstimateSent,DateTime? varEstimateSentDate,bool varComplete,decimal varEstimateTotal,decimal varDoorsTotal,decimal varInteriorsTotal,decimal varBunkerTotal)
		{
			Estimate item = new Estimate();
			
			item.JobName = varJobName;
			
			item.EstimateNumber = varEstimateNumber;
			
			item.Contact = varContact;
			
			item.ContactEmail = varContactEmail;
			
			item.Received = varReceived;
			
			item.Estimator = varEstimator;
			
			item.EstimatesDirectory = varEstimatesDirectory;
			
			item.ProspectDirectory = varProspectDirectory;
			
			item.ResponseRequestedBy = varResponseRequestedBy;
			
			item.MoreInfoNeeded = varMoreInfoNeeded;
			
			item.MoreInfoDate = varMoreInfoDate;
			
			item.InitialDrawing = varInitialDrawing;
			
			item.InitialDrawingDate = varInitialDrawingDate;
			
			item.Thicknesses = varThicknesses;
			
			item.ThicknessesDate = varThicknessesDate;
			
			item.AutoCAD = varAutoCAD;
			
			item.AutoCADDate = varAutoCADDate;
			
			item.Takeoff = varTakeoff;
			
			item.TakeoffDate = varTakeoffDate;
			
			item.EstimateCompleted = varEstimateCompleted;
			
			item.EstimateCompletedDate = varEstimateCompletedDate;
			
			item.EstimateReview = varEstimateReview;
			
			item.EstimateReviewDate = varEstimateReviewDate;
			
			item.EstimateSent = varEstimateSent;
			
			item.EstimateSentDate = varEstimateSentDate;
			
			item.Complete = varComplete;
			
			item.EstimateTotal = varEstimateTotal;
			
			item.DoorsTotal = varDoorsTotal;
			
			item.InteriorsTotal = varInteriorsTotal;
			
			item.BunkerTotal = varBunkerTotal;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varJobName,string varEstimateNumber,string varContact,string varContactEmail,DateTime? varReceived,int? varEstimator,string varEstimatesDirectory,string varProspectDirectory,DateTime? varResponseRequestedBy,bool varMoreInfoNeeded,DateTime? varMoreInfoDate,bool varInitialDrawing,DateTime? varInitialDrawingDate,bool varThicknesses,DateTime? varThicknessesDate,bool varAutoCAD,DateTime? varAutoCADDate,bool varTakeoff,DateTime? varTakeoffDate,bool varEstimateCompleted,DateTime? varEstimateCompletedDate,bool varEstimateReview,DateTime? varEstimateReviewDate,bool varEstimateSent,DateTime? varEstimateSentDate,bool varComplete,decimal varEstimateTotal,decimal varDoorsTotal,decimal varInteriorsTotal,decimal varBunkerTotal)
		{
			Estimate item = new Estimate();
			
				item.Id = varId;
			
				item.JobName = varJobName;
			
				item.EstimateNumber = varEstimateNumber;
			
				item.Contact = varContact;
			
				item.ContactEmail = varContactEmail;
			
				item.Received = varReceived;
			
				item.Estimator = varEstimator;
			
				item.EstimatesDirectory = varEstimatesDirectory;
			
				item.ProspectDirectory = varProspectDirectory;
			
				item.ResponseRequestedBy = varResponseRequestedBy;
			
				item.MoreInfoNeeded = varMoreInfoNeeded;
			
				item.MoreInfoDate = varMoreInfoDate;
			
				item.InitialDrawing = varInitialDrawing;
			
				item.InitialDrawingDate = varInitialDrawingDate;
			
				item.Thicknesses = varThicknesses;
			
				item.ThicknessesDate = varThicknessesDate;
			
				item.AutoCAD = varAutoCAD;
			
				item.AutoCADDate = varAutoCADDate;
			
				item.Takeoff = varTakeoff;
			
				item.TakeoffDate = varTakeoffDate;
			
				item.EstimateCompleted = varEstimateCompleted;
			
				item.EstimateCompletedDate = varEstimateCompletedDate;
			
				item.EstimateReview = varEstimateReview;
			
				item.EstimateReviewDate = varEstimateReviewDate;
			
				item.EstimateSent = varEstimateSent;
			
				item.EstimateSentDate = varEstimateSentDate;
			
				item.Complete = varComplete;
			
				item.EstimateTotal = varEstimateTotal;
			
				item.DoorsTotal = varDoorsTotal;
			
				item.InteriorsTotal = varInteriorsTotal;
			
				item.BunkerTotal = varBunkerTotal;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn JobNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateNumberColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactEmailColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ReceivedColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimatorColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimatesDirectoryColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ProspectDirectoryColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ResponseRequestedByColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn MoreInfoNeededColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn MoreInfoDateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn InitialDrawingColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn InitialDrawingDateColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ThicknessesColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ThicknessesDateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn AutoCADColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn AutoCADDateColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn TakeoffColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn TakeoffDateColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateCompletedColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateCompletedDateColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateReviewColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateReviewDateColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateSentColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateSentDateColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        public static TableSchema.TableColumn CompleteColumn
        {
            get { return Schema.Columns[26]; }
        }
        
        
        
        public static TableSchema.TableColumn EstimateTotalColumn
        {
            get { return Schema.Columns[27]; }
        }
        
        
        
        public static TableSchema.TableColumn DoorsTotalColumn
        {
            get { return Schema.Columns[28]; }
        }
        
        
        
        public static TableSchema.TableColumn InteriorsTotalColumn
        {
            get { return Schema.Columns[29]; }
        }
        
        
        
        public static TableSchema.TableColumn BunkerTotalColumn
        {
            get { return Schema.Columns[30]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string JobName = @"JobName";
			 public static string EstimateNumber = @"EstimateNumber";
			 public static string Contact = @"Contact";
			 public static string ContactEmail = @"ContactEmail";
			 public static string Received = @"Received";
			 public static string Estimator = @"Estimator";
			 public static string EstimatesDirectory = @"EstimatesDirectory";
			 public static string ProspectDirectory = @"ProspectDirectory";
			 public static string ResponseRequestedBy = @"ResponseRequestedBy";
			 public static string MoreInfoNeeded = @"MoreInfoNeeded";
			 public static string MoreInfoDate = @"MoreInfoDate";
			 public static string InitialDrawing = @"InitialDrawing";
			 public static string InitialDrawingDate = @"InitialDrawingDate";
			 public static string Thicknesses = @"Thicknesses";
			 public static string ThicknessesDate = @"ThicknessesDate";
			 public static string AutoCAD = @"AutoCAD";
			 public static string AutoCADDate = @"AutoCADDate";
			 public static string Takeoff = @"Takeoff";
			 public static string TakeoffDate = @"TakeoffDate";
			 public static string EstimateCompleted = @"EstimateCompleted";
			 public static string EstimateCompletedDate = @"EstimateCompletedDate";
			 public static string EstimateReview = @"EstimateReview";
			 public static string EstimateReviewDate = @"EstimateReviewDate";
			 public static string EstimateSent = @"EstimateSent";
			 public static string EstimateSentDate = @"EstimateSentDate";
			 public static string Complete = @"Complete";
			 public static string EstimateTotal = @"EstimateTotal";
			 public static string DoorsTotal = @"DoorsTotal";
			 public static string InteriorsTotal = @"InteriorsTotal";
			 public static string BunkerTotal = @"BunkerTotal";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
