using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the TakeOff class.
	/// </summary>
    [Serializable]
	public partial class TakeOffCollection : ActiveList<TakeOff, TakeOffCollection>
	{	   
		public TakeOffCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TakeOffCollection</returns>
		public TakeOffCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TakeOff o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the A_TakeOffs table.
	/// </summary>
	[Serializable]
	public partial class TakeOff : ActiveRecord<TakeOff>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TakeOff()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TakeOff(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TakeOff(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TakeOff(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("A_TakeOffs", TableType.Table, DataService.GetInstance("VeritasInfo"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarProjectID = new TableSchema.TableColumn(schema);
				colvarProjectID.ColumnName = "ProjectID";
				colvarProjectID.DataType = DbType.Int32;
				colvarProjectID.MaxLength = 0;
				colvarProjectID.AutoIncrement = false;
				colvarProjectID.IsNullable = false;
				colvarProjectID.IsPrimaryKey = false;
				colvarProjectID.IsForeignKey = false;
				colvarProjectID.IsReadOnly = false;
				colvarProjectID.DefaultSetting = @"";
				colvarProjectID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectID);
				
				TableSchema.TableColumn colvarTakeOffDate = new TableSchema.TableColumn(schema);
				colvarTakeOffDate.ColumnName = "TakeOffDate";
				colvarTakeOffDate.DataType = DbType.DateTime;
				colvarTakeOffDate.MaxLength = 0;
				colvarTakeOffDate.AutoIncrement = false;
				colvarTakeOffDate.IsNullable = true;
				colvarTakeOffDate.IsPrimaryKey = false;
				colvarTakeOffDate.IsForeignKey = false;
				colvarTakeOffDate.IsReadOnly = false;
				colvarTakeOffDate.DefaultSetting = @"";
				colvarTakeOffDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTakeOffDate);
				
				TableSchema.TableColumn colvarDrawingsUsed = new TableSchema.TableColumn(schema);
				colvarDrawingsUsed.ColumnName = "DrawingsUsed";
				colvarDrawingsUsed.DataType = DbType.AnsiString;
				colvarDrawingsUsed.MaxLength = 50;
				colvarDrawingsUsed.AutoIncrement = false;
				colvarDrawingsUsed.IsNullable = true;
				colvarDrawingsUsed.IsPrimaryKey = false;
				colvarDrawingsUsed.IsForeignKey = false;
				colvarDrawingsUsed.IsReadOnly = false;
				colvarDrawingsUsed.DefaultSetting = @"";
				colvarDrawingsUsed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDrawingsUsed);
				
				TableSchema.TableColumn colvarPm = new TableSchema.TableColumn(schema);
				colvarPm.ColumnName = "PM";
				colvarPm.DataType = DbType.AnsiString;
				colvarPm.MaxLength = 50;
				colvarPm.AutoIncrement = false;
				colvarPm.IsNullable = true;
				colvarPm.IsPrimaryKey = false;
				colvarPm.IsForeignKey = false;
				colvarPm.IsReadOnly = false;
				colvarPm.DefaultSetting = @"";
				colvarPm.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPm);
				
				TableSchema.TableColumn colvarV250 = new TableSchema.TableColumn(schema);
				colvarV250.ColumnName = "V250";
				colvarV250.DataType = DbType.Decimal;
				colvarV250.MaxLength = 0;
				colvarV250.AutoIncrement = false;
				colvarV250.IsNullable = true;
				colvarV250.IsPrimaryKey = false;
				colvarV250.IsForeignKey = false;
				colvarV250.IsReadOnly = false;
				colvarV250.DefaultSetting = @"";
				colvarV250.ForeignKeyTableName = "";
				schema.Columns.Add(colvarV250);
				
				TableSchema.TableColumn colvarV250HT = new TableSchema.TableColumn(schema);
				colvarV250HT.ColumnName = "V250HT";
				colvarV250HT.DataType = DbType.Decimal;
				colvarV250HT.MaxLength = 0;
				colvarV250HT.AutoIncrement = false;
				colvarV250HT.IsNullable = true;
				colvarV250HT.IsPrimaryKey = false;
				colvarV250HT.IsForeignKey = false;
				colvarV250HT.IsReadOnly = false;
				colvarV250HT.DefaultSetting = @"";
				colvarV250HT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarV250HT);
				
				TableSchema.TableColumn colvarV300 = new TableSchema.TableColumn(schema);
				colvarV300.ColumnName = "V300";
				colvarV300.DataType = DbType.Decimal;
				colvarV300.MaxLength = 0;
				colvarV300.AutoIncrement = false;
				colvarV300.IsNullable = true;
				colvarV300.IsPrimaryKey = false;
				colvarV300.IsForeignKey = false;
				colvarV300.IsReadOnly = false;
				colvarV300.DefaultSetting = @"";
				colvarV300.ForeignKeyTableName = "";
				schema.Columns.Add(colvarV300);
				
				TableSchema.TableColumn colvarV300HT = new TableSchema.TableColumn(schema);
				colvarV300HT.ColumnName = "V300HT";
				colvarV300HT.DataType = DbType.Decimal;
				colvarV300HT.MaxLength = 0;
				colvarV300HT.AutoIncrement = false;
				colvarV300HT.IsNullable = true;
				colvarV300HT.IsPrimaryKey = false;
				colvarV300HT.IsForeignKey = false;
				colvarV300HT.IsReadOnly = false;
				colvarV300HT.DefaultSetting = @"";
				colvarV300HT.ForeignKeyTableName = "";
				schema.Columns.Add(colvarV300HT);
				
				TableSchema.TableColumn colvarGrout = new TableSchema.TableColumn(schema);
				colvarGrout.ColumnName = "Grout";
				colvarGrout.DataType = DbType.Decimal;
				colvarGrout.MaxLength = 0;
				colvarGrout.AutoIncrement = false;
				colvarGrout.IsNullable = true;
				colvarGrout.IsPrimaryKey = false;
				colvarGrout.IsForeignKey = false;
				colvarGrout.IsReadOnly = false;
				colvarGrout.DefaultSetting = @"";
				colvarGrout.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGrout);
				
				TableSchema.TableColumn colvarTrucks = new TableSchema.TableColumn(schema);
				colvarTrucks.ColumnName = "Trucks";
				colvarTrucks.DataType = DbType.Decimal;
				colvarTrucks.MaxLength = 0;
				colvarTrucks.AutoIncrement = false;
				colvarTrucks.IsNullable = true;
				colvarTrucks.IsPrimaryKey = false;
				colvarTrucks.IsForeignKey = false;
				colvarTrucks.IsReadOnly = false;
				colvarTrucks.DefaultSetting = @"";
				colvarTrucks.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrucks);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["VeritasInfo"].AddSchema("A_TakeOffs",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("ProjectID")]
		[Bindable(true)]
		public int ProjectID 
		{
			get { return GetColumnValue<int>(Columns.ProjectID); }
			set { SetColumnValue(Columns.ProjectID, value); }
		}
		  
		[XmlAttribute("TakeOffDate")]
		[Bindable(true)]
		public DateTime? TakeOffDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.TakeOffDate); }
			set { SetColumnValue(Columns.TakeOffDate, value); }
		}
		  
		[XmlAttribute("DrawingsUsed")]
		[Bindable(true)]
		public string DrawingsUsed 
		{
			get { return GetColumnValue<string>(Columns.DrawingsUsed); }
			set { SetColumnValue(Columns.DrawingsUsed, value); }
		}
		  
		[XmlAttribute("Pm")]
		[Bindable(true)]
		public string Pm 
		{
			get { return GetColumnValue<string>(Columns.Pm); }
			set { SetColumnValue(Columns.Pm, value); }
		}
		  
		[XmlAttribute("V250")]
		[Bindable(true)]
		public decimal? V250 
		{
			get { return GetColumnValue<decimal?>(Columns.V250); }
			set { SetColumnValue(Columns.V250, value); }
		}
		  
		[XmlAttribute("V250HT")]
		[Bindable(true)]
		public decimal? V250HT 
		{
			get { return GetColumnValue<decimal?>(Columns.V250HT); }
			set { SetColumnValue(Columns.V250HT, value); }
		}
		  
		[XmlAttribute("V300")]
		[Bindable(true)]
		public decimal? V300 
		{
			get { return GetColumnValue<decimal?>(Columns.V300); }
			set { SetColumnValue(Columns.V300, value); }
		}
		  
		[XmlAttribute("V300HT")]
		[Bindable(true)]
		public decimal? V300HT 
		{
			get { return GetColumnValue<decimal?>(Columns.V300HT); }
			set { SetColumnValue(Columns.V300HT, value); }
		}
		  
		[XmlAttribute("Grout")]
		[Bindable(true)]
		public decimal? Grout 
		{
			get { return GetColumnValue<decimal?>(Columns.Grout); }
			set { SetColumnValue(Columns.Grout, value); }
		}
		  
		[XmlAttribute("Trucks")]
		[Bindable(true)]
		public decimal? Trucks 
		{
			get { return GetColumnValue<decimal?>(Columns.Trucks); }
			set { SetColumnValue(Columns.Trucks, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varProjectID,DateTime? varTakeOffDate,string varDrawingsUsed,string varPm,decimal? varV250,decimal? varV250HT,decimal? varV300,decimal? varV300HT,decimal? varGrout,decimal? varTrucks)
		{
			TakeOff item = new TakeOff();
			
			item.ProjectID = varProjectID;
			
			item.TakeOffDate = varTakeOffDate;
			
			item.DrawingsUsed = varDrawingsUsed;
			
			item.Pm = varPm;
			
			item.V250 = varV250;
			
			item.V250HT = varV250HT;
			
			item.V300 = varV300;
			
			item.V300HT = varV300HT;
			
			item.Grout = varGrout;
			
			item.Trucks = varTrucks;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varProjectID,DateTime? varTakeOffDate,string varDrawingsUsed,string varPm,decimal? varV250,decimal? varV250HT,decimal? varV300,decimal? varV300HT,decimal? varGrout,decimal? varTrucks)
		{
			TakeOff item = new TakeOff();
			
				item.Id = varId;
			
				item.ProjectID = varProjectID;
			
				item.TakeOffDate = varTakeOffDate;
			
				item.DrawingsUsed = varDrawingsUsed;
			
				item.Pm = varPm;
			
				item.V250 = varV250;
			
				item.V250HT = varV250HT;
			
				item.V300 = varV300;
			
				item.V300HT = varV300HT;
			
				item.Grout = varGrout;
			
				item.Trucks = varTrucks;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TakeOffDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DrawingsUsedColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PmColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn V250Column
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn V250HTColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn V300Column
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn V300HTColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn GroutColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn TrucksColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string ProjectID = @"ProjectID";
			 public static string TakeOffDate = @"TakeOffDate";
			 public static string DrawingsUsed = @"DrawingsUsed";
			 public static string Pm = @"PM";
			 public static string V250 = @"V250";
			 public static string V250HT = @"V250HT";
			 public static string V300 = @"V300";
			 public static string V300HT = @"V300HT";
			 public static string Grout = @"Grout";
			 public static string Trucks = @"Trucks";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
