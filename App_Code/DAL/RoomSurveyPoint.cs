using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the RoomSurveyPoint class.
	/// </summary>
    [Serializable]
	public partial class RoomSurveyPointCollection : ActiveList<RoomSurveyPoint, RoomSurveyPointCollection>
	{	   
		public RoomSurveyPointCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>RoomSurveyPointCollection</returns>
		public RoomSurveyPointCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                RoomSurveyPoint o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the A_RoomSurveyPoints table.
	/// </summary>
	[Serializable]
	public partial class RoomSurveyPoint : ActiveRecord<RoomSurveyPoint>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public RoomSurveyPoint()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public RoomSurveyPoint(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public RoomSurveyPoint(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public RoomSurveyPoint(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("A_RoomSurveyPoints", TableType.Table, DataService.GetInstance("VeritasInfo"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarRoomID = new TableSchema.TableColumn(schema);
				colvarRoomID.ColumnName = "RoomID";
				colvarRoomID.DataType = DbType.Int32;
				colvarRoomID.MaxLength = 0;
				colvarRoomID.AutoIncrement = false;
				colvarRoomID.IsNullable = true;
				colvarRoomID.IsPrimaryKey = false;
				colvarRoomID.IsForeignKey = false;
				colvarRoomID.IsReadOnly = false;
				colvarRoomID.DefaultSetting = @"";
				colvarRoomID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoomID);
				
				TableSchema.TableColumn colvarSurveyPoint = new TableSchema.TableColumn(schema);
				colvarSurveyPoint.ColumnName = "SurveyPoint";
				colvarSurveyPoint.DataType = DbType.AnsiString;
				colvarSurveyPoint.MaxLength = 25;
				colvarSurveyPoint.AutoIncrement = false;
				colvarSurveyPoint.IsNullable = true;
				colvarSurveyPoint.IsPrimaryKey = false;
				colvarSurveyPoint.IsForeignKey = false;
				colvarSurveyPoint.IsReadOnly = false;
				colvarSurveyPoint.DefaultSetting = @"";
				colvarSurveyPoint.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurveyPoint);
				
				TableSchema.TableColumn colvarSurveyPointDesc = new TableSchema.TableColumn(schema);
				colvarSurveyPointDesc.ColumnName = "SurveyPointDesc";
				colvarSurveyPointDesc.DataType = DbType.AnsiString;
				colvarSurveyPointDesc.MaxLength = 255;
				colvarSurveyPointDesc.AutoIncrement = false;
				colvarSurveyPointDesc.IsNullable = true;
				colvarSurveyPointDesc.IsPrimaryKey = false;
				colvarSurveyPointDesc.IsForeignKey = false;
				colvarSurveyPointDesc.IsReadOnly = false;
				colvarSurveyPointDesc.DefaultSetting = @"";
				colvarSurveyPointDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSurveyPointDesc);
				
				TableSchema.TableColumn colvarOccupancyFactor = new TableSchema.TableColumn(schema);
				colvarOccupancyFactor.ColumnName = "OccupancyFactor";
				colvarOccupancyFactor.DataType = DbType.Decimal;
				colvarOccupancyFactor.MaxLength = 0;
				colvarOccupancyFactor.AutoIncrement = false;
				colvarOccupancyFactor.IsNullable = true;
				colvarOccupancyFactor.IsPrimaryKey = false;
				colvarOccupancyFactor.IsForeignKey = false;
				colvarOccupancyFactor.IsReadOnly = false;
				colvarOccupancyFactor.DefaultSetting = @"";
				colvarOccupancyFactor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOccupancyFactor);
				
				TableSchema.TableColumn colvarUseFactor = new TableSchema.TableColumn(schema);
				colvarUseFactor.ColumnName = "UseFactor";
				colvarUseFactor.DataType = DbType.Decimal;
				colvarUseFactor.MaxLength = 0;
				colvarUseFactor.AutoIncrement = false;
				colvarUseFactor.IsNullable = true;
				colvarUseFactor.IsPrimaryKey = false;
				colvarUseFactor.IsForeignKey = false;
				colvarUseFactor.IsReadOnly = false;
				colvarUseFactor.DefaultSetting = @"";
				colvarUseFactor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUseFactor);
				
				TableSchema.TableColumn colvarPELValue = new TableSchema.TableColumn(schema);
				colvarPELValue.ColumnName = "PELValue";
				colvarPELValue.DataType = DbType.Decimal;
				colvarPELValue.MaxLength = 0;
				colvarPELValue.AutoIncrement = false;
				colvarPELValue.IsNullable = true;
				colvarPELValue.IsPrimaryKey = false;
				colvarPELValue.IsForeignKey = false;
				colvarPELValue.IsReadOnly = false;
				colvarPELValue.DefaultSetting = @"";
				colvarPELValue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPELValue);
				
				TableSchema.TableColumn colvarPELType = new TableSchema.TableColumn(schema);
				colvarPELType.ColumnName = "PELType";
				colvarPELType.DataType = DbType.AnsiString;
				colvarPELType.MaxLength = 25;
				colvarPELType.AutoIncrement = false;
				colvarPELType.IsNullable = true;
				colvarPELType.IsPrimaryKey = false;
				colvarPELType.IsForeignKey = false;
				colvarPELType.IsReadOnly = false;
				colvarPELType.DefaultSetting = @"";
				colvarPELType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPELType);
				
				TableSchema.TableColumn colvarDistanceFromISOFeet = new TableSchema.TableColumn(schema);
				colvarDistanceFromISOFeet.ColumnName = "DistanceFromISOFeet";
				colvarDistanceFromISOFeet.DataType = DbType.Decimal;
				colvarDistanceFromISOFeet.MaxLength = 0;
				colvarDistanceFromISOFeet.AutoIncrement = false;
				colvarDistanceFromISOFeet.IsNullable = true;
				colvarDistanceFromISOFeet.IsPrimaryKey = false;
				colvarDistanceFromISOFeet.IsForeignKey = false;
				colvarDistanceFromISOFeet.IsReadOnly = false;
				colvarDistanceFromISOFeet.DefaultSetting = @"";
				colvarDistanceFromISOFeet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDistanceFromISOFeet);
				
				TableSchema.TableColumn colvarExistingShielding = new TableSchema.TableColumn(schema);
				colvarExistingShielding.ColumnName = "ExistingShielding";
				colvarExistingShielding.DataType = DbType.AnsiString;
				colvarExistingShielding.MaxLength = -1;
				colvarExistingShielding.AutoIncrement = false;
				colvarExistingShielding.IsNullable = true;
				colvarExistingShielding.IsPrimaryKey = false;
				colvarExistingShielding.IsForeignKey = false;
				colvarExistingShielding.IsReadOnly = false;
				colvarExistingShielding.DefaultSetting = @"";
				colvarExistingShielding.ForeignKeyTableName = "";
				schema.Columns.Add(colvarExistingShielding);
				
				TableSchema.TableColumn colvarAdjacentBuildings = new TableSchema.TableColumn(schema);
				colvarAdjacentBuildings.ColumnName = "AdjacentBuildings";
				colvarAdjacentBuildings.DataType = DbType.AnsiString;
				colvarAdjacentBuildings.MaxLength = 50;
				colvarAdjacentBuildings.AutoIncrement = false;
				colvarAdjacentBuildings.IsNullable = true;
				colvarAdjacentBuildings.IsPrimaryKey = false;
				colvarAdjacentBuildings.IsForeignKey = false;
				colvarAdjacentBuildings.IsReadOnly = false;
				colvarAdjacentBuildings.DefaultSetting = @"";
				colvarAdjacentBuildings.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdjacentBuildings);
				
				TableSchema.TableColumn colvarDistanceFromISOMeters = new TableSchema.TableColumn(schema);
				colvarDistanceFromISOMeters.ColumnName = "DistanceFromISOMeters";
				colvarDistanceFromISOMeters.DataType = DbType.Decimal;
				colvarDistanceFromISOMeters.MaxLength = 0;
				colvarDistanceFromISOMeters.AutoIncrement = false;
				colvarDistanceFromISOMeters.IsNullable = true;
				colvarDistanceFromISOMeters.IsPrimaryKey = false;
				colvarDistanceFromISOMeters.IsForeignKey = false;
				colvarDistanceFromISOMeters.IsReadOnly = false;
				colvarDistanceFromISOMeters.DefaultSetting = @"";
				colvarDistanceFromISOMeters.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDistanceFromISOMeters);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["VeritasInfo"].AddSchema("A_RoomSurveyPoints",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("RoomID")]
		[Bindable(true)]
		public int? RoomID 
		{
			get { return GetColumnValue<int?>(Columns.RoomID); }
			set { SetColumnValue(Columns.RoomID, value); }
		}
		  
		[XmlAttribute("SurveyPoint")]
		[Bindable(true)]
		public string SurveyPoint 
		{
			get { return GetColumnValue<string>(Columns.SurveyPoint); }
			set { SetColumnValue(Columns.SurveyPoint, value); }
		}
		  
		[XmlAttribute("SurveyPointDesc")]
		[Bindable(true)]
		public string SurveyPointDesc 
		{
			get { return GetColumnValue<string>(Columns.SurveyPointDesc); }
			set { SetColumnValue(Columns.SurveyPointDesc, value); }
		}
		  
		[XmlAttribute("OccupancyFactor")]
		[Bindable(true)]
		public decimal? OccupancyFactor 
		{
			get { return GetColumnValue<decimal?>(Columns.OccupancyFactor); }
			set { SetColumnValue(Columns.OccupancyFactor, value); }
		}
		  
		[XmlAttribute("UseFactor")]
		[Bindable(true)]
		public decimal? UseFactor 
		{
			get { return GetColumnValue<decimal?>(Columns.UseFactor); }
			set { SetColumnValue(Columns.UseFactor, value); }
		}
		  
		[XmlAttribute("PELValue")]
		[Bindable(true)]
		public decimal? PELValue 
		{
			get { return GetColumnValue<decimal?>(Columns.PELValue); }
			set { SetColumnValue(Columns.PELValue, value); }
		}
		  
		[XmlAttribute("PELType")]
		[Bindable(true)]
		public string PELType 
		{
			get { return GetColumnValue<string>(Columns.PELType); }
			set { SetColumnValue(Columns.PELType, value); }
		}
		  
		[XmlAttribute("DistanceFromISOFeet")]
		[Bindable(true)]
		public decimal? DistanceFromISOFeet 
		{
			get { return GetColumnValue<decimal?>(Columns.DistanceFromISOFeet); }
			set { SetColumnValue(Columns.DistanceFromISOFeet, value); }
		}
		  
		[XmlAttribute("ExistingShielding")]
		[Bindable(true)]
		public string ExistingShielding 
		{
			get { return GetColumnValue<string>(Columns.ExistingShielding); }
			set { SetColumnValue(Columns.ExistingShielding, value); }
		}
		  
		[XmlAttribute("AdjacentBuildings")]
		[Bindable(true)]
		public string AdjacentBuildings 
		{
			get { return GetColumnValue<string>(Columns.AdjacentBuildings); }
			set { SetColumnValue(Columns.AdjacentBuildings, value); }
		}
		  
		[XmlAttribute("DistanceFromISOMeters")]
		[Bindable(true)]
		public decimal? DistanceFromISOMeters 
		{
			get { return GetColumnValue<decimal?>(Columns.DistanceFromISOMeters); }
			set { SetColumnValue(Columns.DistanceFromISOMeters, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varRoomID,string varSurveyPoint,string varSurveyPointDesc,decimal? varOccupancyFactor,decimal? varUseFactor,decimal? varPELValue,string varPELType,decimal? varDistanceFromISOFeet,string varExistingShielding,string varAdjacentBuildings,decimal? varDistanceFromISOMeters)
		{
			RoomSurveyPoint item = new RoomSurveyPoint();
			
			item.RoomID = varRoomID;
			
			item.SurveyPoint = varSurveyPoint;
			
			item.SurveyPointDesc = varSurveyPointDesc;
			
			item.OccupancyFactor = varOccupancyFactor;
			
			item.UseFactor = varUseFactor;
			
			item.PELValue = varPELValue;
			
			item.PELType = varPELType;
			
			item.DistanceFromISOFeet = varDistanceFromISOFeet;
			
			item.ExistingShielding = varExistingShielding;
			
			item.AdjacentBuildings = varAdjacentBuildings;
			
			item.DistanceFromISOMeters = varDistanceFromISOMeters;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varRoomID,string varSurveyPoint,string varSurveyPointDesc,decimal? varOccupancyFactor,decimal? varUseFactor,decimal? varPELValue,string varPELType,decimal? varDistanceFromISOFeet,string varExistingShielding,string varAdjacentBuildings,decimal? varDistanceFromISOMeters)
		{
			RoomSurveyPoint item = new RoomSurveyPoint();
			
				item.Id = varId;
			
				item.RoomID = varRoomID;
			
				item.SurveyPoint = varSurveyPoint;
			
				item.SurveyPointDesc = varSurveyPointDesc;
			
				item.OccupancyFactor = varOccupancyFactor;
			
				item.UseFactor = varUseFactor;
			
				item.PELValue = varPELValue;
			
				item.PELType = varPELType;
			
				item.DistanceFromISOFeet = varDistanceFromISOFeet;
			
				item.ExistingShielding = varExistingShielding;
			
				item.AdjacentBuildings = varAdjacentBuildings;
			
				item.DistanceFromISOMeters = varDistanceFromISOMeters;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RoomIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SurveyPointColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SurveyPointDescColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn OccupancyFactorColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn UseFactorColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PELValueColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PELTypeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DistanceFromISOFeetColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ExistingShieldingColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn AdjacentBuildingsColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn DistanceFromISOMetersColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string RoomID = @"RoomID";
			 public static string SurveyPoint = @"SurveyPoint";
			 public static string SurveyPointDesc = @"SurveyPointDesc";
			 public static string OccupancyFactor = @"OccupancyFactor";
			 public static string UseFactor = @"UseFactor";
			 public static string PELValue = @"PELValue";
			 public static string PELType = @"PELType";
			 public static string DistanceFromISOFeet = @"DistanceFromISOFeet";
			 public static string ExistingShielding = @"ExistingShielding";
			 public static string AdjacentBuildings = @"AdjacentBuildings";
			 public static string DistanceFromISOMeters = @"DistanceFromISOMeters";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
