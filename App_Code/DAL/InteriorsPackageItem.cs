using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the InteriorsPackageItem class.
	/// </summary>
    [Serializable]
	public partial class InteriorsPackageItemCollection : ActiveList<InteriorsPackageItem, InteriorsPackageItemCollection>
	{	   
		public InteriorsPackageItemCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InteriorsPackageItemCollection</returns>
		public InteriorsPackageItemCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InteriorsPackageItem o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the InteriorsPackageItems table.
	/// </summary>
	[Serializable]
	public partial class InteriorsPackageItem : ActiveRecord<InteriorsPackageItem>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InteriorsPackageItem()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InteriorsPackageItem(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InteriorsPackageItem(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InteriorsPackageItem(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("InteriorsPackageItems", TableType.Table, DataService.GetInstance("VeritasInfo"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarPackageID = new TableSchema.TableColumn(schema);
				colvarPackageID.ColumnName = "PackageID";
				colvarPackageID.DataType = DbType.Int32;
				colvarPackageID.MaxLength = 0;
				colvarPackageID.AutoIncrement = false;
				colvarPackageID.IsNullable = false;
				colvarPackageID.IsPrimaryKey = false;
				colvarPackageID.IsForeignKey = false;
				colvarPackageID.IsReadOnly = false;
				colvarPackageID.DefaultSetting = @"";
				colvarPackageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackageID);
				
				TableSchema.TableColumn colvarPackageLevelID = new TableSchema.TableColumn(schema);
				colvarPackageLevelID.ColumnName = "PackageLevelID";
				colvarPackageLevelID.DataType = DbType.Int32;
				colvarPackageLevelID.MaxLength = 0;
				colvarPackageLevelID.AutoIncrement = false;
				colvarPackageLevelID.IsNullable = false;
				colvarPackageLevelID.IsPrimaryKey = false;
				colvarPackageLevelID.IsForeignKey = false;
				colvarPackageLevelID.IsReadOnly = false;
				colvarPackageLevelID.DefaultSetting = @"";
				colvarPackageLevelID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPackageLevelID);
				
				TableSchema.TableColumn colvarCategoryID = new TableSchema.TableColumn(schema);
				colvarCategoryID.ColumnName = "CategoryID";
				colvarCategoryID.DataType = DbType.Int32;
				colvarCategoryID.MaxLength = 0;
				colvarCategoryID.AutoIncrement = false;
				colvarCategoryID.IsNullable = false;
				colvarCategoryID.IsPrimaryKey = false;
				colvarCategoryID.IsForeignKey = false;
				colvarCategoryID.IsReadOnly = false;
				colvarCategoryID.DefaultSetting = @"";
				colvarCategoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCategoryID);
				
				TableSchema.TableColumn colvarItemID = new TableSchema.TableColumn(schema);
				colvarItemID.ColumnName = "ItemID";
				colvarItemID.DataType = DbType.Int32;
				colvarItemID.MaxLength = 0;
				colvarItemID.AutoIncrement = false;
				colvarItemID.IsNullable = false;
				colvarItemID.IsPrimaryKey = false;
				colvarItemID.IsForeignKey = false;
				colvarItemID.IsReadOnly = false;
				colvarItemID.DefaultSetting = @"";
				colvarItemID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarItemID);
				
				TableSchema.TableColumn colvarLastUpdated = new TableSchema.TableColumn(schema);
				colvarLastUpdated.ColumnName = "LastUpdated";
				colvarLastUpdated.DataType = DbType.DateTime;
				colvarLastUpdated.MaxLength = 0;
				colvarLastUpdated.AutoIncrement = false;
				colvarLastUpdated.IsNullable = true;
				colvarLastUpdated.IsPrimaryKey = false;
				colvarLastUpdated.IsForeignKey = false;
				colvarLastUpdated.IsReadOnly = false;
				colvarLastUpdated.DefaultSetting = @"";
				colvarLastUpdated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastUpdated);
				
				TableSchema.TableColumn colvarUpdatedBy = new TableSchema.TableColumn(schema);
				colvarUpdatedBy.ColumnName = "UpdatedBy";
				colvarUpdatedBy.DataType = DbType.AnsiString;
				colvarUpdatedBy.MaxLength = 50;
				colvarUpdatedBy.AutoIncrement = false;
				colvarUpdatedBy.IsNullable = true;
				colvarUpdatedBy.IsPrimaryKey = false;
				colvarUpdatedBy.IsForeignKey = false;
				colvarUpdatedBy.IsReadOnly = false;
				colvarUpdatedBy.DefaultSetting = @"";
				colvarUpdatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedBy);
				
				TableSchema.TableColumn colvarDefaultItem = new TableSchema.TableColumn(schema);
				colvarDefaultItem.ColumnName = "DefaultItem";
				colvarDefaultItem.DataType = DbType.Boolean;
				colvarDefaultItem.MaxLength = 0;
				colvarDefaultItem.AutoIncrement = false;
				colvarDefaultItem.IsNullable = true;
				colvarDefaultItem.IsPrimaryKey = false;
				colvarDefaultItem.IsForeignKey = false;
				colvarDefaultItem.IsReadOnly = false;
				colvarDefaultItem.DefaultSetting = @"";
				colvarDefaultItem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDefaultItem);
				
				TableSchema.TableColumn colvarSalesSummary = new TableSchema.TableColumn(schema);
				colvarSalesSummary.ColumnName = "SalesSummary";
				colvarSalesSummary.DataType = DbType.Boolean;
				colvarSalesSummary.MaxLength = 0;
				colvarSalesSummary.AutoIncrement = false;
				colvarSalesSummary.IsNullable = true;
				colvarSalesSummary.IsPrimaryKey = false;
				colvarSalesSummary.IsForeignKey = false;
				colvarSalesSummary.IsReadOnly = false;
				colvarSalesSummary.DefaultSetting = @"";
				colvarSalesSummary.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSalesSummary);
				
				TableSchema.TableColumn colvarQty = new TableSchema.TableColumn(schema);
				colvarQty.ColumnName = "Qty";
				colvarQty.DataType = DbType.Decimal;
				colvarQty.MaxLength = 0;
				colvarQty.AutoIncrement = false;
				colvarQty.IsNullable = true;
				colvarQty.IsPrimaryKey = false;
				colvarQty.IsForeignKey = false;
				colvarQty.IsReadOnly = false;
				colvarQty.DefaultSetting = @"";
				colvarQty.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQty);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["VeritasInfo"].AddSchema("InteriorsPackageItems",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("PackageID")]
		[Bindable(true)]
		public int PackageID 
		{
			get { return GetColumnValue<int>(Columns.PackageID); }
			set { SetColumnValue(Columns.PackageID, value); }
		}
		  
		[XmlAttribute("PackageLevelID")]
		[Bindable(true)]
		public int PackageLevelID 
		{
			get { return GetColumnValue<int>(Columns.PackageLevelID); }
			set { SetColumnValue(Columns.PackageLevelID, value); }
		}
		  
		[XmlAttribute("CategoryID")]
		[Bindable(true)]
		public int CategoryID 
		{
			get { return GetColumnValue<int>(Columns.CategoryID); }
			set { SetColumnValue(Columns.CategoryID, value); }
		}
		  
		[XmlAttribute("ItemID")]
		[Bindable(true)]
		public int ItemID 
		{
			get { return GetColumnValue<int>(Columns.ItemID); }
			set { SetColumnValue(Columns.ItemID, value); }
		}
		  
		[XmlAttribute("LastUpdated")]
		[Bindable(true)]
		public DateTime? LastUpdated 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastUpdated); }
			set { SetColumnValue(Columns.LastUpdated, value); }
		}
		  
		[XmlAttribute("UpdatedBy")]
		[Bindable(true)]
		public string UpdatedBy 
		{
			get { return GetColumnValue<string>(Columns.UpdatedBy); }
			set { SetColumnValue(Columns.UpdatedBy, value); }
		}
		  
		[XmlAttribute("DefaultItem")]
		[Bindable(true)]
		public bool? DefaultItem 
		{
			get { return GetColumnValue<bool?>(Columns.DefaultItem); }
			set { SetColumnValue(Columns.DefaultItem, value); }
		}
		  
		[XmlAttribute("SalesSummary")]
		[Bindable(true)]
		public bool? SalesSummary 
		{
			get { return GetColumnValue<bool?>(Columns.SalesSummary); }
			set { SetColumnValue(Columns.SalesSummary, value); }
		}
		  
		[XmlAttribute("Qty")]
		[Bindable(true)]
		public decimal? Qty 
		{
			get { return GetColumnValue<decimal?>(Columns.Qty); }
			set { SetColumnValue(Columns.Qty, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varPackageID,int varPackageLevelID,int varCategoryID,int varItemID,DateTime? varLastUpdated,string varUpdatedBy,bool? varDefaultItem,bool? varSalesSummary,decimal? varQty)
		{
			InteriorsPackageItem item = new InteriorsPackageItem();
			
			item.PackageID = varPackageID;
			
			item.PackageLevelID = varPackageLevelID;
			
			item.CategoryID = varCategoryID;
			
			item.ItemID = varItemID;
			
			item.LastUpdated = varLastUpdated;
			
			item.UpdatedBy = varUpdatedBy;
			
			item.DefaultItem = varDefaultItem;
			
			item.SalesSummary = varSalesSummary;
			
			item.Qty = varQty;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varPackageID,int varPackageLevelID,int varCategoryID,int varItemID,DateTime? varLastUpdated,string varUpdatedBy,bool? varDefaultItem,bool? varSalesSummary,decimal? varQty)
		{
			InteriorsPackageItem item = new InteriorsPackageItem();
			
				item.Id = varId;
			
				item.PackageID = varPackageID;
			
				item.PackageLevelID = varPackageLevelID;
			
				item.CategoryID = varCategoryID;
			
				item.ItemID = varItemID;
			
				item.LastUpdated = varLastUpdated;
			
				item.UpdatedBy = varUpdatedBy;
			
				item.DefaultItem = varDefaultItem;
			
				item.SalesSummary = varSalesSummary;
			
				item.Qty = varQty;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PackageIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PackageLevelIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CategoryIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ItemIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LastUpdatedColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedByColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DefaultItemColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SalesSummaryColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn QtyColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string PackageID = @"PackageID";
			 public static string PackageLevelID = @"PackageLevelID";
			 public static string CategoryID = @"CategoryID";
			 public static string ItemID = @"ItemID";
			 public static string LastUpdated = @"LastUpdated";
			 public static string UpdatedBy = @"UpdatedBy";
			 public static string DefaultItem = @"DefaultItem";
			 public static string SalesSummary = @"SalesSummary";
			 public static string Qty = @"Qty";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
