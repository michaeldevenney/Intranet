using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the Room class.
	/// </summary>
    [Serializable]
	public partial class RoomCollection : ActiveList<Room, RoomCollection>
	{	   
		public RoomCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>RoomCollection</returns>
		public RoomCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Room o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the A_Rooms table.
	/// </summary>
	[Serializable]
	public partial class Room : ActiveRecord<Room>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Room()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Room(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Room(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Room(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("A_Rooms", TableType.Table, DataService.GetInstance("VeritasInfo"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarRoomName = new TableSchema.TableColumn(schema);
				colvarRoomName.ColumnName = "RoomName";
				colvarRoomName.DataType = DbType.AnsiString;
				colvarRoomName.MaxLength = 50;
				colvarRoomName.AutoIncrement = false;
				colvarRoomName.IsNullable = true;
				colvarRoomName.IsPrimaryKey = false;
				colvarRoomName.IsForeignKey = false;
				colvarRoomName.IsReadOnly = false;
				colvarRoomName.DefaultSetting = @"";
				colvarRoomName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoomName);
				
				TableSchema.TableColumn colvarProjectID = new TableSchema.TableColumn(schema);
				colvarProjectID.ColumnName = "ProjectID";
				colvarProjectID.DataType = DbType.Int32;
				colvarProjectID.MaxLength = 0;
				colvarProjectID.AutoIncrement = false;
				colvarProjectID.IsNullable = false;
				colvarProjectID.IsPrimaryKey = false;
				colvarProjectID.IsForeignKey = false;
				colvarProjectID.IsReadOnly = false;
				colvarProjectID.DefaultSetting = @"";
				colvarProjectID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectID);
				
				TableSchema.TableColumn colvarEntryType = new TableSchema.TableColumn(schema);
				colvarEntryType.ColumnName = "EntryType";
				colvarEntryType.DataType = DbType.AnsiString;
				colvarEntryType.MaxLength = 25;
				colvarEntryType.AutoIncrement = false;
				colvarEntryType.IsNullable = true;
				colvarEntryType.IsPrimaryKey = false;
				colvarEntryType.IsForeignKey = false;
				colvarEntryType.IsReadOnly = false;
				colvarEntryType.DefaultSetting = @"";
				colvarEntryType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEntryType);
				
				TableSchema.TableColumn colvarMachine = new TableSchema.TableColumn(schema);
				colvarMachine.ColumnName = "Machine";
				colvarMachine.DataType = DbType.AnsiString;
				colvarMachine.MaxLength = 25;
				colvarMachine.AutoIncrement = false;
				colvarMachine.IsNullable = true;
				colvarMachine.IsPrimaryKey = false;
				colvarMachine.IsForeignKey = false;
				colvarMachine.IsReadOnly = false;
				colvarMachine.DefaultSetting = @"";
				colvarMachine.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMachine);
				
				TableSchema.TableColumn colvarMachineEnergy = new TableSchema.TableColumn(schema);
				colvarMachineEnergy.ColumnName = "MachineEnergy";
				colvarMachineEnergy.DataType = DbType.AnsiString;
				colvarMachineEnergy.MaxLength = 10;
				colvarMachineEnergy.AutoIncrement = false;
				colvarMachineEnergy.IsNullable = true;
				colvarMachineEnergy.IsPrimaryKey = false;
				colvarMachineEnergy.IsForeignKey = false;
				colvarMachineEnergy.IsReadOnly = false;
				colvarMachineEnergy.DefaultSetting = @"";
				colvarMachineEnergy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMachineEnergy);
				
				TableSchema.TableColumn colvarDoorSize = new TableSchema.TableColumn(schema);
				colvarDoorSize.ColumnName = "DoorSize";
				colvarDoorSize.DataType = DbType.Int32;
				colvarDoorSize.MaxLength = 0;
				colvarDoorSize.AutoIncrement = false;
				colvarDoorSize.IsNullable = true;
				colvarDoorSize.IsPrimaryKey = false;
				colvarDoorSize.IsForeignKey = false;
				colvarDoorSize.IsReadOnly = false;
				colvarDoorSize.DefaultSetting = @"";
				colvarDoorSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoorSize);
				
				TableSchema.TableColumn colvarDoorHand = new TableSchema.TableColumn(schema);
				colvarDoorHand.ColumnName = "DoorHand";
				colvarDoorHand.DataType = DbType.AnsiString;
				colvarDoorHand.MaxLength = 10;
				colvarDoorHand.AutoIncrement = false;
				colvarDoorHand.IsNullable = true;
				colvarDoorHand.IsPrimaryKey = false;
				colvarDoorHand.IsForeignKey = false;
				colvarDoorHand.IsReadOnly = false;
				colvarDoorHand.DefaultSetting = @"";
				colvarDoorHand.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoorHand);
				
				TableSchema.TableColumn colvarDoorOnly = new TableSchema.TableColumn(schema);
				colvarDoorOnly.ColumnName = "DoorOnly";
				colvarDoorOnly.DataType = DbType.Boolean;
				colvarDoorOnly.MaxLength = 0;
				colvarDoorOnly.AutoIncrement = false;
				colvarDoorOnly.IsNullable = true;
				colvarDoorOnly.IsPrimaryKey = false;
				colvarDoorOnly.IsForeignKey = false;
				colvarDoorOnly.IsReadOnly = false;
				colvarDoorOnly.DefaultSetting = @"";
				colvarDoorOnly.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDoorOnly);
				
				TableSchema.TableColumn colvarWorkloadPrimary = new TableSchema.TableColumn(schema);
				colvarWorkloadPrimary.ColumnName = "WorkloadPrimary";
				colvarWorkloadPrimary.DataType = DbType.AnsiString;
				colvarWorkloadPrimary.MaxLength = 25;
				colvarWorkloadPrimary.AutoIncrement = false;
				colvarWorkloadPrimary.IsNullable = true;
				colvarWorkloadPrimary.IsPrimaryKey = false;
				colvarWorkloadPrimary.IsForeignKey = false;
				colvarWorkloadPrimary.IsReadOnly = false;
				colvarWorkloadPrimary.DefaultSetting = @"";
				colvarWorkloadPrimary.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkloadPrimary);
				
				TableSchema.TableColumn colvarWorkloadSecondary = new TableSchema.TableColumn(schema);
				colvarWorkloadSecondary.ColumnName = "WorkloadSecondary";
				colvarWorkloadSecondary.DataType = DbType.AnsiString;
				colvarWorkloadSecondary.MaxLength = 25;
				colvarWorkloadSecondary.AutoIncrement = false;
				colvarWorkloadSecondary.IsNullable = true;
				colvarWorkloadSecondary.IsPrimaryKey = false;
				colvarWorkloadSecondary.IsForeignKey = false;
				colvarWorkloadSecondary.IsReadOnly = false;
				colvarWorkloadSecondary.DefaultSetting = @"";
				colvarWorkloadSecondary.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWorkloadSecondary);
				
				TableSchema.TableColumn colvarMachineDoseRate = new TableSchema.TableColumn(schema);
				colvarMachineDoseRate.ColumnName = "MachineDoseRate";
				colvarMachineDoseRate.DataType = DbType.AnsiString;
				colvarMachineDoseRate.MaxLength = 25;
				colvarMachineDoseRate.AutoIncrement = false;
				colvarMachineDoseRate.IsNullable = true;
				colvarMachineDoseRate.IsPrimaryKey = false;
				colvarMachineDoseRate.IsForeignKey = false;
				colvarMachineDoseRate.IsReadOnly = false;
				colvarMachineDoseRate.DefaultSetting = @"";
				colvarMachineDoseRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMachineDoseRate);
				
				TableSchema.TableColumn colvarModConvPctTime = new TableSchema.TableColumn(schema);
				colvarModConvPctTime.ColumnName = "ModConvPctTime";
				colvarModConvPctTime.DataType = DbType.Decimal;
				colvarModConvPctTime.MaxLength = 0;
				colvarModConvPctTime.AutoIncrement = false;
				colvarModConvPctTime.IsNullable = true;
				colvarModConvPctTime.IsPrimaryKey = false;
				colvarModConvPctTime.IsForeignKey = false;
				colvarModConvPctTime.IsReadOnly = false;
				colvarModConvPctTime.DefaultSetting = @"";
				colvarModConvPctTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModConvPctTime);
				
				TableSchema.TableColumn colvarModConvPctEnergy = new TableSchema.TableColumn(schema);
				colvarModConvPctEnergy.ColumnName = "ModConvPctEnergy";
				colvarModConvPctEnergy.DataType = DbType.Decimal;
				colvarModConvPctEnergy.MaxLength = 0;
				colvarModConvPctEnergy.AutoIncrement = false;
				colvarModConvPctEnergy.IsNullable = true;
				colvarModConvPctEnergy.IsPrimaryKey = false;
				colvarModConvPctEnergy.IsForeignKey = false;
				colvarModConvPctEnergy.IsReadOnly = false;
				colvarModConvPctEnergy.DefaultSetting = @"";
				colvarModConvPctEnergy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModConvPctEnergy);
				
				TableSchema.TableColumn colvarModIMRTPctTime = new TableSchema.TableColumn(schema);
				colvarModIMRTPctTime.ColumnName = "ModIMRTPctTime";
				colvarModIMRTPctTime.DataType = DbType.Decimal;
				colvarModIMRTPctTime.MaxLength = 0;
				colvarModIMRTPctTime.AutoIncrement = false;
				colvarModIMRTPctTime.IsNullable = true;
				colvarModIMRTPctTime.IsPrimaryKey = false;
				colvarModIMRTPctTime.IsForeignKey = false;
				colvarModIMRTPctTime.IsReadOnly = false;
				colvarModIMRTPctTime.DefaultSetting = @"";
				colvarModIMRTPctTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModIMRTPctTime);
				
				TableSchema.TableColumn colvarModIMRTPctEnergy = new TableSchema.TableColumn(schema);
				colvarModIMRTPctEnergy.ColumnName = "ModIMRTPctEnergy";
				colvarModIMRTPctEnergy.DataType = DbType.Decimal;
				colvarModIMRTPctEnergy.MaxLength = 0;
				colvarModIMRTPctEnergy.AutoIncrement = false;
				colvarModIMRTPctEnergy.IsNullable = true;
				colvarModIMRTPctEnergy.IsPrimaryKey = false;
				colvarModIMRTPctEnergy.IsForeignKey = false;
				colvarModIMRTPctEnergy.IsReadOnly = false;
				colvarModIMRTPctEnergy.DefaultSetting = @"";
				colvarModIMRTPctEnergy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModIMRTPctEnergy);
				
				TableSchema.TableColumn colvarModIMRTFactor = new TableSchema.TableColumn(schema);
				colvarModIMRTFactor.ColumnName = "ModIMRTFactor";
				colvarModIMRTFactor.DataType = DbType.Decimal;
				colvarModIMRTFactor.MaxLength = 0;
				colvarModIMRTFactor.AutoIncrement = false;
				colvarModIMRTFactor.IsNullable = true;
				colvarModIMRTFactor.IsPrimaryKey = false;
				colvarModIMRTFactor.IsForeignKey = false;
				colvarModIMRTFactor.IsReadOnly = false;
				colvarModIMRTFactor.DefaultSetting = @"";
				colvarModIMRTFactor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModIMRTFactor);
				
				TableSchema.TableColumn colvarModTBIPctTime = new TableSchema.TableColumn(schema);
				colvarModTBIPctTime.ColumnName = "ModTBIPctTime";
				colvarModTBIPctTime.DataType = DbType.Decimal;
				colvarModTBIPctTime.MaxLength = 0;
				colvarModTBIPctTime.AutoIncrement = false;
				colvarModTBIPctTime.IsNullable = true;
				colvarModTBIPctTime.IsPrimaryKey = false;
				colvarModTBIPctTime.IsForeignKey = false;
				colvarModTBIPctTime.IsReadOnly = false;
				colvarModTBIPctTime.DefaultSetting = @"";
				colvarModTBIPctTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModTBIPctTime);
				
				TableSchema.TableColumn colvarModTBIPctEnergy = new TableSchema.TableColumn(schema);
				colvarModTBIPctEnergy.ColumnName = "ModTBIPctEnergy";
				colvarModTBIPctEnergy.DataType = DbType.Decimal;
				colvarModTBIPctEnergy.MaxLength = 0;
				colvarModTBIPctEnergy.AutoIncrement = false;
				colvarModTBIPctEnergy.IsNullable = true;
				colvarModTBIPctEnergy.IsPrimaryKey = false;
				colvarModTBIPctEnergy.IsForeignKey = false;
				colvarModTBIPctEnergy.IsReadOnly = false;
				colvarModTBIPctEnergy.DefaultSetting = @"";
				colvarModTBIPctEnergy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModTBIPctEnergy);
				
				TableSchema.TableColumn colvarModStereoPctTime = new TableSchema.TableColumn(schema);
				colvarModStereoPctTime.ColumnName = "ModStereoPctTime";
				colvarModStereoPctTime.DataType = DbType.Decimal;
				colvarModStereoPctTime.MaxLength = 0;
				colvarModStereoPctTime.AutoIncrement = false;
				colvarModStereoPctTime.IsNullable = true;
				colvarModStereoPctTime.IsPrimaryKey = false;
				colvarModStereoPctTime.IsForeignKey = false;
				colvarModStereoPctTime.IsReadOnly = false;
				colvarModStereoPctTime.DefaultSetting = @"";
				colvarModStereoPctTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModStereoPctTime);
				
				TableSchema.TableColumn colvarModStereoPctEnergy = new TableSchema.TableColumn(schema);
				colvarModStereoPctEnergy.ColumnName = "ModStereoPctEnergy";
				colvarModStereoPctEnergy.DataType = DbType.Decimal;
				colvarModStereoPctEnergy.MaxLength = 0;
				colvarModStereoPctEnergy.AutoIncrement = false;
				colvarModStereoPctEnergy.IsNullable = true;
				colvarModStereoPctEnergy.IsPrimaryKey = false;
				colvarModStereoPctEnergy.IsForeignKey = false;
				colvarModStereoPctEnergy.IsReadOnly = false;
				colvarModStereoPctEnergy.DefaultSetting = @"";
				colvarModStereoPctEnergy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModStereoPctEnergy);
				
				TableSchema.TableColumn colvarCode = new TableSchema.TableColumn(schema);
				colvarCode.ColumnName = "Code";
				colvarCode.DataType = DbType.AnsiString;
				colvarCode.MaxLength = 25;
				colvarCode.AutoIncrement = false;
				colvarCode.IsNullable = true;
				colvarCode.IsPrimaryKey = false;
				colvarCode.IsForeignKey = false;
				colvarCode.IsReadOnly = false;
				colvarCode.DefaultSetting = @"";
				colvarCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCode);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["VeritasInfo"].AddSchema("A_Rooms",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("RoomName")]
		[Bindable(true)]
		public string RoomName 
		{
			get { return GetColumnValue<string>(Columns.RoomName); }
			set { SetColumnValue(Columns.RoomName, value); }
		}
		  
		[XmlAttribute("ProjectID")]
		[Bindable(true)]
		public int ProjectID 
		{
			get { return GetColumnValue<int>(Columns.ProjectID); }
			set { SetColumnValue(Columns.ProjectID, value); }
		}
		  
		[XmlAttribute("EntryType")]
		[Bindable(true)]
		public string EntryType 
		{
			get { return GetColumnValue<string>(Columns.EntryType); }
			set { SetColumnValue(Columns.EntryType, value); }
		}
		  
		[XmlAttribute("Machine")]
		[Bindable(true)]
		public string Machine 
		{
			get { return GetColumnValue<string>(Columns.Machine); }
			set { SetColumnValue(Columns.Machine, value); }
		}
		  
		[XmlAttribute("MachineEnergy")]
		[Bindable(true)]
		public string MachineEnergy 
		{
			get { return GetColumnValue<string>(Columns.MachineEnergy); }
			set { SetColumnValue(Columns.MachineEnergy, value); }
		}
		  
		[XmlAttribute("DoorSize")]
		[Bindable(true)]
		public int? DoorSize 
		{
			get { return GetColumnValue<int?>(Columns.DoorSize); }
			set { SetColumnValue(Columns.DoorSize, value); }
		}
		  
		[XmlAttribute("DoorHand")]
		[Bindable(true)]
		public string DoorHand 
		{
			get { return GetColumnValue<string>(Columns.DoorHand); }
			set { SetColumnValue(Columns.DoorHand, value); }
		}
		  
		[XmlAttribute("DoorOnly")]
		[Bindable(true)]
		public bool? DoorOnly 
		{
			get { return GetColumnValue<bool?>(Columns.DoorOnly); }
			set { SetColumnValue(Columns.DoorOnly, value); }
		}
		  
		[XmlAttribute("WorkloadPrimary")]
		[Bindable(true)]
		public string WorkloadPrimary 
		{
			get { return GetColumnValue<string>(Columns.WorkloadPrimary); }
			set { SetColumnValue(Columns.WorkloadPrimary, value); }
		}
		  
		[XmlAttribute("WorkloadSecondary")]
		[Bindable(true)]
		public string WorkloadSecondary 
		{
			get { return GetColumnValue<string>(Columns.WorkloadSecondary); }
			set { SetColumnValue(Columns.WorkloadSecondary, value); }
		}
		  
		[XmlAttribute("MachineDoseRate")]
		[Bindable(true)]
		public string MachineDoseRate 
		{
			get { return GetColumnValue<string>(Columns.MachineDoseRate); }
			set { SetColumnValue(Columns.MachineDoseRate, value); }
		}
		  
		[XmlAttribute("ModConvPctTime")]
		[Bindable(true)]
		public decimal? ModConvPctTime 
		{
			get { return GetColumnValue<decimal?>(Columns.ModConvPctTime); }
			set { SetColumnValue(Columns.ModConvPctTime, value); }
		}
		  
		[XmlAttribute("ModConvPctEnergy")]
		[Bindable(true)]
		public decimal? ModConvPctEnergy 
		{
			get { return GetColumnValue<decimal?>(Columns.ModConvPctEnergy); }
			set { SetColumnValue(Columns.ModConvPctEnergy, value); }
		}
		  
		[XmlAttribute("ModIMRTPctTime")]
		[Bindable(true)]
		public decimal? ModIMRTPctTime 
		{
			get { return GetColumnValue<decimal?>(Columns.ModIMRTPctTime); }
			set { SetColumnValue(Columns.ModIMRTPctTime, value); }
		}
		  
		[XmlAttribute("ModIMRTPctEnergy")]
		[Bindable(true)]
		public decimal? ModIMRTPctEnergy 
		{
			get { return GetColumnValue<decimal?>(Columns.ModIMRTPctEnergy); }
			set { SetColumnValue(Columns.ModIMRTPctEnergy, value); }
		}
		  
		[XmlAttribute("ModIMRTFactor")]
		[Bindable(true)]
		public decimal? ModIMRTFactor 
		{
			get { return GetColumnValue<decimal?>(Columns.ModIMRTFactor); }
			set { SetColumnValue(Columns.ModIMRTFactor, value); }
		}
		  
		[XmlAttribute("ModTBIPctTime")]
		[Bindable(true)]
		public decimal? ModTBIPctTime 
		{
			get { return GetColumnValue<decimal?>(Columns.ModTBIPctTime); }
			set { SetColumnValue(Columns.ModTBIPctTime, value); }
		}
		  
		[XmlAttribute("ModTBIPctEnergy")]
		[Bindable(true)]
		public decimal? ModTBIPctEnergy 
		{
			get { return GetColumnValue<decimal?>(Columns.ModTBIPctEnergy); }
			set { SetColumnValue(Columns.ModTBIPctEnergy, value); }
		}
		  
		[XmlAttribute("ModStereoPctTime")]
		[Bindable(true)]
		public decimal? ModStereoPctTime 
		{
			get { return GetColumnValue<decimal?>(Columns.ModStereoPctTime); }
			set { SetColumnValue(Columns.ModStereoPctTime, value); }
		}
		  
		[XmlAttribute("ModStereoPctEnergy")]
		[Bindable(true)]
		public decimal? ModStereoPctEnergy 
		{
			get { return GetColumnValue<decimal?>(Columns.ModStereoPctEnergy); }
			set { SetColumnValue(Columns.ModStereoPctEnergy, value); }
		}
		  
		[XmlAttribute("Code")]
		[Bindable(true)]
		public string Code 
		{
			get { return GetColumnValue<string>(Columns.Code); }
			set { SetColumnValue(Columns.Code, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varRoomName,int varProjectID,string varEntryType,string varMachine,string varMachineEnergy,int? varDoorSize,string varDoorHand,bool? varDoorOnly,string varWorkloadPrimary,string varWorkloadSecondary,string varMachineDoseRate,decimal? varModConvPctTime,decimal? varModConvPctEnergy,decimal? varModIMRTPctTime,decimal? varModIMRTPctEnergy,decimal? varModIMRTFactor,decimal? varModTBIPctTime,decimal? varModTBIPctEnergy,decimal? varModStereoPctTime,decimal? varModStereoPctEnergy,string varCode)
		{
			Room item = new Room();
			
			item.RoomName = varRoomName;
			
			item.ProjectID = varProjectID;
			
			item.EntryType = varEntryType;
			
			item.Machine = varMachine;
			
			item.MachineEnergy = varMachineEnergy;
			
			item.DoorSize = varDoorSize;
			
			item.DoorHand = varDoorHand;
			
			item.DoorOnly = varDoorOnly;
			
			item.WorkloadPrimary = varWorkloadPrimary;
			
			item.WorkloadSecondary = varWorkloadSecondary;
			
			item.MachineDoseRate = varMachineDoseRate;
			
			item.ModConvPctTime = varModConvPctTime;
			
			item.ModConvPctEnergy = varModConvPctEnergy;
			
			item.ModIMRTPctTime = varModIMRTPctTime;
			
			item.ModIMRTPctEnergy = varModIMRTPctEnergy;
			
			item.ModIMRTFactor = varModIMRTFactor;
			
			item.ModTBIPctTime = varModTBIPctTime;
			
			item.ModTBIPctEnergy = varModTBIPctEnergy;
			
			item.ModStereoPctTime = varModStereoPctTime;
			
			item.ModStereoPctEnergy = varModStereoPctEnergy;
			
			item.Code = varCode;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varRoomName,int varProjectID,string varEntryType,string varMachine,string varMachineEnergy,int? varDoorSize,string varDoorHand,bool? varDoorOnly,string varWorkloadPrimary,string varWorkloadSecondary,string varMachineDoseRate,decimal? varModConvPctTime,decimal? varModConvPctEnergy,decimal? varModIMRTPctTime,decimal? varModIMRTPctEnergy,decimal? varModIMRTFactor,decimal? varModTBIPctTime,decimal? varModTBIPctEnergy,decimal? varModStereoPctTime,decimal? varModStereoPctEnergy,string varCode)
		{
			Room item = new Room();
			
				item.Id = varId;
			
				item.RoomName = varRoomName;
			
				item.ProjectID = varProjectID;
			
				item.EntryType = varEntryType;
			
				item.Machine = varMachine;
			
				item.MachineEnergy = varMachineEnergy;
			
				item.DoorSize = varDoorSize;
			
				item.DoorHand = varDoorHand;
			
				item.DoorOnly = varDoorOnly;
			
				item.WorkloadPrimary = varWorkloadPrimary;
			
				item.WorkloadSecondary = varWorkloadSecondary;
			
				item.MachineDoseRate = varMachineDoseRate;
			
				item.ModConvPctTime = varModConvPctTime;
			
				item.ModConvPctEnergy = varModConvPctEnergy;
			
				item.ModIMRTPctTime = varModIMRTPctTime;
			
				item.ModIMRTPctEnergy = varModIMRTPctEnergy;
			
				item.ModIMRTFactor = varModIMRTFactor;
			
				item.ModTBIPctTime = varModTBIPctTime;
			
				item.ModTBIPctEnergy = varModTBIPctEnergy;
			
				item.ModStereoPctTime = varModStereoPctTime;
			
				item.ModStereoPctEnergy = varModStereoPctEnergy;
			
				item.Code = varCode;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RoomNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EntryTypeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MachineColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MachineEnergyColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DoorSizeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DoorHandColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DoorOnlyColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkloadPrimaryColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn WorkloadSecondaryColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn MachineDoseRateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ModConvPctTimeColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModConvPctEnergyColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ModIMRTPctTimeColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn ModIMRTPctEnergyColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn ModIMRTFactorColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ModTBIPctTimeColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn ModTBIPctEnergyColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ModStereoPctTimeColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ModStereoPctEnergyColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn CodeColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string RoomName = @"RoomName";
			 public static string ProjectID = @"ProjectID";
			 public static string EntryType = @"EntryType";
			 public static string Machine = @"Machine";
			 public static string MachineEnergy = @"MachineEnergy";
			 public static string DoorSize = @"DoorSize";
			 public static string DoorHand = @"DoorHand";
			 public static string DoorOnly = @"DoorOnly";
			 public static string WorkloadPrimary = @"WorkloadPrimary";
			 public static string WorkloadSecondary = @"WorkloadSecondary";
			 public static string MachineDoseRate = @"MachineDoseRate";
			 public static string ModConvPctTime = @"ModConvPctTime";
			 public static string ModConvPctEnergy = @"ModConvPctEnergy";
			 public static string ModIMRTPctTime = @"ModIMRTPctTime";
			 public static string ModIMRTPctEnergy = @"ModIMRTPctEnergy";
			 public static string ModIMRTFactor = @"ModIMRTFactor";
			 public static string ModTBIPctTime = @"ModTBIPctTime";
			 public static string ModTBIPctEnergy = @"ModTBIPctEnergy";
			 public static string ModStereoPctTime = @"ModStereoPctTime";
			 public static string ModStereoPctEnergy = @"ModStereoPctEnergy";
			 public static string Code = @"Code";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
