using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
    /// <summary>
    /// Controller class for Estimates
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class EstimateController
    {
        // Preload our schema..
        Estimate thisSchemaLoad = new Estimate();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public EstimateCollection FetchAll()
        {
            EstimateCollection coll = new EstimateCollection();
            Query qry = new Query(Estimate.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public EstimateCollection FetchByID(object Id)
        {
            EstimateCollection coll = new EstimateCollection().Where("ID", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public EstimateCollection FetchByQuery(Query qry)
        {
            EstimateCollection coll = new EstimateCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (Estimate.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (Estimate.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? JobName,string EstimateNumber,string Contact,string ContactEmail,DateTime? Received,int? Estimator,string EstimatesDirectory,string ProspectDirectory,DateTime? ResponseRequestedBy,bool MoreInfoNeeded,DateTime? MoreInfoDate,bool InitialDrawing,DateTime? InitialDrawingDate,bool Thicknesses,DateTime? ThicknessesDate,bool AutoCAD,DateTime? AutoCADDate,bool Takeoff,DateTime? TakeoffDate,bool EstimateCompleted,DateTime? EstimateCompletedDate,bool EstimateReview,DateTime? EstimateReviewDate,bool EstimateSent,DateTime? EstimateSentDate,bool Complete,decimal EstimateTotal,decimal DoorsTotal,decimal InteriorsTotal,decimal BunkerTotal)
	    {
		    Estimate item = new Estimate();
		    
            item.JobName = JobName;
            
            item.EstimateNumber = EstimateNumber;
            
            item.Contact = Contact;
            
            item.ContactEmail = ContactEmail;
            
            item.Received = Received;
            
            item.Estimator = Estimator;
            
            item.EstimatesDirectory = EstimatesDirectory;
            
            item.ProspectDirectory = ProspectDirectory;
            
            item.ResponseRequestedBy = ResponseRequestedBy;
            
            item.MoreInfoNeeded = MoreInfoNeeded;
            
            item.MoreInfoDate = MoreInfoDate;
            
            item.InitialDrawing = InitialDrawing;
            
            item.InitialDrawingDate = InitialDrawingDate;
            
            item.Thicknesses = Thicknesses;
            
            item.ThicknessesDate = ThicknessesDate;
            
            item.AutoCAD = AutoCAD;
            
            item.AutoCADDate = AutoCADDate;
            
            item.Takeoff = Takeoff;
            
            item.TakeoffDate = TakeoffDate;
            
            item.EstimateCompleted = EstimateCompleted;
            
            item.EstimateCompletedDate = EstimateCompletedDate;
            
            item.EstimateReview = EstimateReview;
            
            item.EstimateReviewDate = EstimateReviewDate;
            
            item.EstimateSent = EstimateSent;
            
            item.EstimateSentDate = EstimateSentDate;
            
            item.Complete = Complete;
            
            item.EstimateTotal = EstimateTotal;
            
            item.DoorsTotal = DoorsTotal;
            
            item.InteriorsTotal = InteriorsTotal;
            
            item.BunkerTotal = BunkerTotal;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int Id,int? JobName,string EstimateNumber,string Contact,string ContactEmail,DateTime? Received,int? Estimator,string EstimatesDirectory,string ProspectDirectory,DateTime? ResponseRequestedBy,bool MoreInfoNeeded,DateTime? MoreInfoDate,bool InitialDrawing,DateTime? InitialDrawingDate,bool Thicknesses,DateTime? ThicknessesDate,bool AutoCAD,DateTime? AutoCADDate,bool Takeoff,DateTime? TakeoffDate,bool EstimateCompleted,DateTime? EstimateCompletedDate,bool EstimateReview,DateTime? EstimateReviewDate,bool EstimateSent,DateTime? EstimateSentDate,bool Complete,decimal EstimateTotal,decimal DoorsTotal,decimal InteriorsTotal,decimal BunkerTotal)
	    {
		    Estimate item = new Estimate();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Id = Id;
				
			item.JobName = JobName;
				
			item.EstimateNumber = EstimateNumber;
				
			item.Contact = Contact;
				
			item.ContactEmail = ContactEmail;
				
			item.Received = Received;
				
			item.Estimator = Estimator;
				
			item.EstimatesDirectory = EstimatesDirectory;
				
			item.ProspectDirectory = ProspectDirectory;
				
			item.ResponseRequestedBy = ResponseRequestedBy;
				
			item.MoreInfoNeeded = MoreInfoNeeded;
				
			item.MoreInfoDate = MoreInfoDate;
				
			item.InitialDrawing = InitialDrawing;
				
			item.InitialDrawingDate = InitialDrawingDate;
				
			item.Thicknesses = Thicknesses;
				
			item.ThicknessesDate = ThicknessesDate;
				
			item.AutoCAD = AutoCAD;
				
			item.AutoCADDate = AutoCADDate;
				
			item.Takeoff = Takeoff;
				
			item.TakeoffDate = TakeoffDate;
				
			item.EstimateCompleted = EstimateCompleted;
				
			item.EstimateCompletedDate = EstimateCompletedDate;
				
			item.EstimateReview = EstimateReview;
				
			item.EstimateReviewDate = EstimateReviewDate;
				
			item.EstimateSent = EstimateSent;
				
			item.EstimateSentDate = EstimateSentDate;
				
			item.Complete = Complete;
				
			item.EstimateTotal = EstimateTotal;
				
			item.DoorsTotal = DoorsTotal;
				
			item.InteriorsTotal = InteriorsTotal;
				
			item.BunkerTotal = BunkerTotal;
				
	        item.Save(UserName);
	    }
    }
}
