using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the Prospect class.
	/// </summary>
    [Serializable]
	public partial class ProspectCollection : ActiveList<Prospect, ProspectCollection>
	{	   
		public ProspectCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ProspectCollection</returns>
		public ProspectCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Prospect o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the A_Prospects table.
	/// </summary>
	[Serializable]
	public partial class Prospect : ActiveRecord<Prospect>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Prospect()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Prospect(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Prospect(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Prospect(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("A_Prospects", TableType.Table, DataService.GetInstance("VeritasInfo"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarProspectNumber = new TableSchema.TableColumn(schema);
				colvarProspectNumber.ColumnName = "ProspectNumber";
				colvarProspectNumber.DataType = DbType.AnsiString;
				colvarProspectNumber.MaxLength = 10;
				colvarProspectNumber.AutoIncrement = false;
				colvarProspectNumber.IsNullable = false;
				colvarProspectNumber.IsPrimaryKey = false;
				colvarProspectNumber.IsForeignKey = false;
				colvarProspectNumber.IsReadOnly = false;
				colvarProspectNumber.DefaultSetting = @"";
				colvarProspectNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProspectNumber);
				
				TableSchema.TableColumn colvarProspectName = new TableSchema.TableColumn(schema);
				colvarProspectName.ColumnName = "ProspectName";
				colvarProspectName.DataType = DbType.AnsiString;
				colvarProspectName.MaxLength = 50;
				colvarProspectName.AutoIncrement = false;
				colvarProspectName.IsNullable = false;
				colvarProspectName.IsPrimaryKey = false;
				colvarProspectName.IsForeignKey = false;
				colvarProspectName.IsReadOnly = false;
				colvarProspectName.DefaultSetting = @"";
				colvarProspectName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProspectName);
				
				TableSchema.TableColumn colvarLocation = new TableSchema.TableColumn(schema);
				colvarLocation.ColumnName = "Location";
				colvarLocation.DataType = DbType.AnsiString;
				colvarLocation.MaxLength = 50;
				colvarLocation.AutoIncrement = false;
				colvarLocation.IsNullable = false;
				colvarLocation.IsPrimaryKey = false;
				colvarLocation.IsForeignKey = false;
				colvarLocation.IsReadOnly = false;
				colvarLocation.DefaultSetting = @"";
				colvarLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocation);
				
				TableSchema.TableColumn colvarCreated = new TableSchema.TableColumn(schema);
				colvarCreated.ColumnName = "Created";
				colvarCreated.DataType = DbType.DateTime;
				colvarCreated.MaxLength = 0;
				colvarCreated.AutoIncrement = false;
				colvarCreated.IsNullable = true;
				colvarCreated.IsPrimaryKey = false;
				colvarCreated.IsForeignKey = false;
				colvarCreated.IsReadOnly = false;
				colvarCreated.DefaultSetting = @"";
				colvarCreated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreated);
				
				TableSchema.TableColumn colvarRegion = new TableSchema.TableColumn(schema);
				colvarRegion.ColumnName = "Region";
				colvarRegion.DataType = DbType.AnsiString;
				colvarRegion.MaxLength = 3;
				colvarRegion.AutoIncrement = false;
				colvarRegion.IsNullable = true;
				colvarRegion.IsPrimaryKey = false;
				colvarRegion.IsForeignKey = false;
				colvarRegion.IsReadOnly = false;
				colvarRegion.DefaultSetting = @"";
				colvarRegion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegion);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["VeritasInfo"].AddSchema("A_Prospects",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("ProspectNumber")]
		[Bindable(true)]
		public string ProspectNumber 
		{
			get { return GetColumnValue<string>(Columns.ProspectNumber); }
			set { SetColumnValue(Columns.ProspectNumber, value); }
		}
		  
		[XmlAttribute("ProspectName")]
		[Bindable(true)]
		public string ProspectName 
		{
			get { return GetColumnValue<string>(Columns.ProspectName); }
			set { SetColumnValue(Columns.ProspectName, value); }
		}
		  
		[XmlAttribute("Location")]
		[Bindable(true)]
		public string Location 
		{
			get { return GetColumnValue<string>(Columns.Location); }
			set { SetColumnValue(Columns.Location, value); }
		}
		  
		[XmlAttribute("Created")]
		[Bindable(true)]
		public DateTime? Created 
		{
			get { return GetColumnValue<DateTime?>(Columns.Created); }
			set { SetColumnValue(Columns.Created, value); }
		}
		  
		[XmlAttribute("Region")]
		[Bindable(true)]
		public string Region 
		{
			get { return GetColumnValue<string>(Columns.Region); }
			set { SetColumnValue(Columns.Region, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varProspectNumber,string varProspectName,string varLocation,DateTime? varCreated,string varRegion)
		{
			Prospect item = new Prospect();
			
			item.ProspectNumber = varProspectNumber;
			
			item.ProspectName = varProspectName;
			
			item.Location = varLocation;
			
			item.Created = varCreated;
			
			item.Region = varRegion;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varProspectNumber,string varProspectName,string varLocation,DateTime? varCreated,string varRegion)
		{
			Prospect item = new Prospect();
			
				item.Id = varId;
			
				item.ProspectNumber = varProspectNumber;
			
				item.ProspectName = varProspectName;
			
				item.Location = varLocation;
			
				item.Created = varCreated;
			
				item.Region = varRegion;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ProspectNumberColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ProspectNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LocationColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn RegionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string ProspectNumber = @"ProspectNumber";
			 public static string ProspectName = @"ProspectName";
			 public static string Location = @"Location";
			 public static string Created = @"Created";
			 public static string Region = @"Region";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
