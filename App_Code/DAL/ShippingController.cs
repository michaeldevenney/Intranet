using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
    /// <summary>
    /// Controller class for S_Shipping
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class ShippingController
    {
        // Preload our schema..
        Shipping thisSchemaLoad = new Shipping();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ShippingCollection FetchAll()
        {
            ShippingCollection coll = new ShippingCollection();
            Query qry = new Query(Shipping.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ShippingCollection FetchByID(object Id)
        {
            ShippingCollection coll = new ShippingCollection().Where("ID", Id).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public ShippingCollection FetchByQuery(Query qry)
        {
            ShippingCollection coll = new ShippingCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (Shipping.Delete(Id) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (Shipping.Destroy(Id) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int? Bolid,int ProjectID,int? ShipFrom,string BOLNumber,int? ShipTo,DateTime? ShippingDate,int? Carrier,string ContainerNumber,string BookingNumber,string CabNumber,string SealNumber,string DriverCellNumber,string ContactName,string ContactCell,bool? FreightChargePre,bool? FreightChargeCol,bool? FreightCharge3rd,bool? MasterBOL,decimal? ValueAmt,string ValueUnit,decimal? CODAmount,bool? FeeTermsColl,bool? FeeTermsPre,bool? FeeTermsCust,string EnteredBy,DateTime? EnteredDate,bool? Processed,string AdditionalEmailAddress)
	    {
		    Shipping item = new Shipping();
		    
            item.Bolid = Bolid;
            
            item.ProjectID = ProjectID;
            
            item.ShipFrom = ShipFrom;
            
            item.BOLNumber = BOLNumber;
            
            item.ShipTo = ShipTo;
            
            item.ShippingDate = ShippingDate;
            
            item.Carrier = Carrier;
            
            item.ContainerNumber = ContainerNumber;
            
            item.BookingNumber = BookingNumber;
            
            item.CabNumber = CabNumber;
            
            item.SealNumber = SealNumber;
            
            item.DriverCellNumber = DriverCellNumber;
            
            item.ContactName = ContactName;
            
            item.ContactCell = ContactCell;
            
            item.FreightChargePre = FreightChargePre;
            
            item.FreightChargeCol = FreightChargeCol;
            
            item.FreightCharge3rd = FreightCharge3rd;
            
            item.MasterBOL = MasterBOL;
            
            item.ValueAmt = ValueAmt;
            
            item.ValueUnit = ValueUnit;
            
            item.CODAmount = CODAmount;
            
            item.FeeTermsColl = FeeTermsColl;
            
            item.FeeTermsPre = FeeTermsPre;
            
            item.FeeTermsCust = FeeTermsCust;
            
            item.EnteredBy = EnteredBy;
            
            item.EnteredDate = EnteredDate;
            
            item.Processed = Processed;
            
            item.AdditionalEmailAddress = AdditionalEmailAddress;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int Id,int? Bolid,int ProjectID,int? ShipFrom,string BOLNumber,int? ShipTo,DateTime? ShippingDate,int? Carrier,string ContainerNumber,string BookingNumber,string CabNumber,string SealNumber,string DriverCellNumber,string ContactName,string ContactCell,bool? FreightChargePre,bool? FreightChargeCol,bool? FreightCharge3rd,bool? MasterBOL,decimal? ValueAmt,string ValueUnit,decimal? CODAmount,bool? FeeTermsColl,bool? FeeTermsPre,bool? FeeTermsCust,string EnteredBy,DateTime? EnteredDate,bool? Processed,string AdditionalEmailAddress)
	    {
		    Shipping item = new Shipping();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Id = Id;
				
			item.Bolid = Bolid;
				
			item.ProjectID = ProjectID;
				
			item.ShipFrom = ShipFrom;
				
			item.BOLNumber = BOLNumber;
				
			item.ShipTo = ShipTo;
				
			item.ShippingDate = ShippingDate;
				
			item.Carrier = Carrier;
				
			item.ContainerNumber = ContainerNumber;
				
			item.BookingNumber = BookingNumber;
				
			item.CabNumber = CabNumber;
				
			item.SealNumber = SealNumber;
				
			item.DriverCellNumber = DriverCellNumber;
				
			item.ContactName = ContactName;
				
			item.ContactCell = ContactCell;
				
			item.FreightChargePre = FreightChargePre;
				
			item.FreightChargeCol = FreightChargeCol;
				
			item.FreightCharge3rd = FreightCharge3rd;
				
			item.MasterBOL = MasterBOL;
				
			item.ValueAmt = ValueAmt;
				
			item.ValueUnit = ValueUnit;
				
			item.CODAmount = CODAmount;
				
			item.FeeTermsColl = FeeTermsColl;
				
			item.FeeTermsPre = FeeTermsPre;
				
			item.FeeTermsCust = FeeTermsCust;
				
			item.EnteredBy = EnteredBy;
				
			item.EnteredDate = EnteredDate;
				
			item.Processed = Processed;
				
			item.AdditionalEmailAddress = AdditionalEmailAddress;
				
	        item.Save(UserName);
	    }
    }
}
