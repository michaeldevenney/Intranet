using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the InteriorsItem class.
	/// </summary>
    [Serializable]
	public partial class InteriorsItemCollection : ActiveList<InteriorsItem, InteriorsItemCollection>
	{	   
		public InteriorsItemCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InteriorsItemCollection</returns>
		public InteriorsItemCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InteriorsItem o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the InteriorsItems table.
	/// </summary>
	[Serializable]
	public partial class InteriorsItem : ActiveRecord<InteriorsItem>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InteriorsItem()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InteriorsItem(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InteriorsItem(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InteriorsItem(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("InteriorsItems", TableType.Table, DataService.GetInstance("VeritasInfo"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarCategoryID = new TableSchema.TableColumn(schema);
				colvarCategoryID.ColumnName = "CategoryID";
				colvarCategoryID.DataType = DbType.Int32;
				colvarCategoryID.MaxLength = 0;
				colvarCategoryID.AutoIncrement = false;
				colvarCategoryID.IsNullable = true;
				colvarCategoryID.IsPrimaryKey = false;
				colvarCategoryID.IsForeignKey = false;
				colvarCategoryID.IsReadOnly = false;
				colvarCategoryID.DefaultSetting = @"";
				colvarCategoryID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCategoryID);
				
				TableSchema.TableColumn colvarAssemblyID = new TableSchema.TableColumn(schema);
				colvarAssemblyID.ColumnName = "AssemblyID";
				colvarAssemblyID.DataType = DbType.Int32;
				colvarAssemblyID.MaxLength = 0;
				colvarAssemblyID.AutoIncrement = false;
				colvarAssemblyID.IsNullable = true;
				colvarAssemblyID.IsPrimaryKey = false;
				colvarAssemblyID.IsForeignKey = false;
				colvarAssemblyID.IsReadOnly = false;
				colvarAssemblyID.DefaultSetting = @"";
				colvarAssemblyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssemblyID);
				
				TableSchema.TableColumn colvarManufacturer = new TableSchema.TableColumn(schema);
				colvarManufacturer.ColumnName = "Manufacturer";
				colvarManufacturer.DataType = DbType.AnsiString;
				colvarManufacturer.MaxLength = 50;
				colvarManufacturer.AutoIncrement = false;
				colvarManufacturer.IsNullable = true;
				colvarManufacturer.IsPrimaryKey = false;
				colvarManufacturer.IsForeignKey = false;
				colvarManufacturer.IsReadOnly = false;
				colvarManufacturer.DefaultSetting = @"";
				colvarManufacturer.ForeignKeyTableName = "";
				schema.Columns.Add(colvarManufacturer);
				
				TableSchema.TableColumn colvarMake = new TableSchema.TableColumn(schema);
				colvarMake.ColumnName = "Make";
				colvarMake.DataType = DbType.AnsiString;
				colvarMake.MaxLength = 50;
				colvarMake.AutoIncrement = false;
				colvarMake.IsNullable = true;
				colvarMake.IsPrimaryKey = false;
				colvarMake.IsForeignKey = false;
				colvarMake.IsReadOnly = false;
				colvarMake.DefaultSetting = @"";
				colvarMake.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMake);
				
				TableSchema.TableColumn colvarModelNumber = new TableSchema.TableColumn(schema);
				colvarModelNumber.ColumnName = "ModelNumber";
				colvarModelNumber.DataType = DbType.AnsiString;
				colvarModelNumber.MaxLength = 50;
				colvarModelNumber.AutoIncrement = false;
				colvarModelNumber.IsNullable = true;
				colvarModelNumber.IsPrimaryKey = false;
				colvarModelNumber.IsForeignKey = false;
				colvarModelNumber.IsReadOnly = false;
				colvarModelNumber.DefaultSetting = @"";
				colvarModelNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModelNumber);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = -1;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarColor = new TableSchema.TableColumn(schema);
				colvarColor.ColumnName = "Color";
				colvarColor.DataType = DbType.AnsiString;
				colvarColor.MaxLength = 50;
				colvarColor.AutoIncrement = false;
				colvarColor.IsNullable = true;
				colvarColor.IsPrimaryKey = false;
				colvarColor.IsForeignKey = false;
				colvarColor.IsReadOnly = false;
				colvarColor.DefaultSetting = @"";
				colvarColor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarColor);
				
				TableSchema.TableColumn colvarLength = new TableSchema.TableColumn(schema);
				colvarLength.ColumnName = "Length";
				colvarLength.DataType = DbType.Decimal;
				colvarLength.MaxLength = 0;
				colvarLength.AutoIncrement = false;
				colvarLength.IsNullable = true;
				colvarLength.IsPrimaryKey = false;
				colvarLength.IsForeignKey = false;
				colvarLength.IsReadOnly = false;
				colvarLength.DefaultSetting = @"";
				colvarLength.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLength);
				
				TableSchema.TableColumn colvarWidth = new TableSchema.TableColumn(schema);
				colvarWidth.ColumnName = "Width";
				colvarWidth.DataType = DbType.Decimal;
				colvarWidth.MaxLength = 0;
				colvarWidth.AutoIncrement = false;
				colvarWidth.IsNullable = true;
				colvarWidth.IsPrimaryKey = false;
				colvarWidth.IsForeignKey = false;
				colvarWidth.IsReadOnly = false;
				colvarWidth.DefaultSetting = @"";
				colvarWidth.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWidth);
				
				TableSchema.TableColumn colvarThickness = new TableSchema.TableColumn(schema);
				colvarThickness.ColumnName = "Thickness";
				colvarThickness.DataType = DbType.Decimal;
				colvarThickness.MaxLength = 0;
				colvarThickness.AutoIncrement = false;
				colvarThickness.IsNullable = true;
				colvarThickness.IsPrimaryKey = false;
				colvarThickness.IsForeignKey = false;
				colvarThickness.IsReadOnly = false;
				colvarThickness.DefaultSetting = @"";
				colvarThickness.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThickness);
				
				TableSchema.TableColumn colvarFinish = new TableSchema.TableColumn(schema);
				colvarFinish.ColumnName = "Finish";
				colvarFinish.DataType = DbType.AnsiString;
				colvarFinish.MaxLength = 50;
				colvarFinish.AutoIncrement = false;
				colvarFinish.IsNullable = true;
				colvarFinish.IsPrimaryKey = false;
				colvarFinish.IsForeignKey = false;
				colvarFinish.IsReadOnly = false;
				colvarFinish.DefaultSetting = @"";
				colvarFinish.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFinish);
				
				TableSchema.TableColumn colvarUnit = new TableSchema.TableColumn(schema);
				colvarUnit.ColumnName = "Unit";
				colvarUnit.DataType = DbType.AnsiString;
				colvarUnit.MaxLength = 50;
				colvarUnit.AutoIncrement = false;
				colvarUnit.IsNullable = true;
				colvarUnit.IsPrimaryKey = false;
				colvarUnit.IsForeignKey = false;
				colvarUnit.IsReadOnly = false;
				colvarUnit.DefaultSetting = @"";
				colvarUnit.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnit);
				
				TableSchema.TableColumn colvarUnitPrice = new TableSchema.TableColumn(schema);
				colvarUnitPrice.ColumnName = "UnitPrice";
				colvarUnitPrice.DataType = DbType.Currency;
				colvarUnitPrice.MaxLength = 0;
				colvarUnitPrice.AutoIncrement = false;
				colvarUnitPrice.IsNullable = true;
				colvarUnitPrice.IsPrimaryKey = false;
				colvarUnitPrice.IsForeignKey = false;
				colvarUnitPrice.IsReadOnly = false;
				colvarUnitPrice.DefaultSetting = @"";
				colvarUnitPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnitPrice);
				
				TableSchema.TableColumn colvarLastPriceUpdate = new TableSchema.TableColumn(schema);
				colvarLastPriceUpdate.ColumnName = "LastPriceUpdate";
				colvarLastPriceUpdate.DataType = DbType.DateTime;
				colvarLastPriceUpdate.MaxLength = 0;
				colvarLastPriceUpdate.AutoIncrement = false;
				colvarLastPriceUpdate.IsNullable = true;
				colvarLastPriceUpdate.IsPrimaryKey = false;
				colvarLastPriceUpdate.IsForeignKey = false;
				colvarLastPriceUpdate.IsReadOnly = false;
				colvarLastPriceUpdate.DefaultSetting = @"";
				colvarLastPriceUpdate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastPriceUpdate);
				
				TableSchema.TableColumn colvarLastPriceUpdateBy = new TableSchema.TableColumn(schema);
				colvarLastPriceUpdateBy.ColumnName = "LastPriceUpdateBy";
				colvarLastPriceUpdateBy.DataType = DbType.AnsiString;
				colvarLastPriceUpdateBy.MaxLength = 50;
				colvarLastPriceUpdateBy.AutoIncrement = false;
				colvarLastPriceUpdateBy.IsNullable = true;
				colvarLastPriceUpdateBy.IsPrimaryKey = false;
				colvarLastPriceUpdateBy.IsForeignKey = false;
				colvarLastPriceUpdateBy.IsReadOnly = false;
				colvarLastPriceUpdateBy.DefaultSetting = @"";
				colvarLastPriceUpdateBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastPriceUpdateBy);
				
				TableSchema.TableColumn colvarIsAssembly = new TableSchema.TableColumn(schema);
				colvarIsAssembly.ColumnName = "IsAssembly";
				colvarIsAssembly.DataType = DbType.Boolean;
				colvarIsAssembly.MaxLength = 0;
				colvarIsAssembly.AutoIncrement = false;
				colvarIsAssembly.IsNullable = false;
				colvarIsAssembly.IsPrimaryKey = false;
				colvarIsAssembly.IsForeignKey = false;
				colvarIsAssembly.IsReadOnly = false;
				colvarIsAssembly.DefaultSetting = @"";
				colvarIsAssembly.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsAssembly);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["VeritasInfo"].AddSchema("InteriorsItems",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("CategoryID")]
		[Bindable(true)]
		public int? CategoryID 
		{
			get { return GetColumnValue<int?>(Columns.CategoryID); }
			set { SetColumnValue(Columns.CategoryID, value); }
		}
		  
		[XmlAttribute("AssemblyID")]
		[Bindable(true)]
		public int? AssemblyID 
		{
			get { return GetColumnValue<int?>(Columns.AssemblyID); }
			set { SetColumnValue(Columns.AssemblyID, value); }
		}
		  
		[XmlAttribute("Manufacturer")]
		[Bindable(true)]
		public string Manufacturer 
		{
			get { return GetColumnValue<string>(Columns.Manufacturer); }
			set { SetColumnValue(Columns.Manufacturer, value); }
		}
		  
		[XmlAttribute("Make")]
		[Bindable(true)]
		public string Make 
		{
			get { return GetColumnValue<string>(Columns.Make); }
			set { SetColumnValue(Columns.Make, value); }
		}
		  
		[XmlAttribute("ModelNumber")]
		[Bindable(true)]
		public string ModelNumber 
		{
			get { return GetColumnValue<string>(Columns.ModelNumber); }
			set { SetColumnValue(Columns.ModelNumber, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("Color")]
		[Bindable(true)]
		public string Color 
		{
			get { return GetColumnValue<string>(Columns.Color); }
			set { SetColumnValue(Columns.Color, value); }
		}
		  
		[XmlAttribute("Length")]
		[Bindable(true)]
		public decimal? Length 
		{
			get { return GetColumnValue<decimal?>(Columns.Length); }
			set { SetColumnValue(Columns.Length, value); }
		}
		  
		[XmlAttribute("Width")]
		[Bindable(true)]
		public decimal? Width 
		{
			get { return GetColumnValue<decimal?>(Columns.Width); }
			set { SetColumnValue(Columns.Width, value); }
		}
		  
		[XmlAttribute("Thickness")]
		[Bindable(true)]
		public decimal? Thickness 
		{
			get { return GetColumnValue<decimal?>(Columns.Thickness); }
			set { SetColumnValue(Columns.Thickness, value); }
		}
		  
		[XmlAttribute("Finish")]
		[Bindable(true)]
		public string Finish 
		{
			get { return GetColumnValue<string>(Columns.Finish); }
			set { SetColumnValue(Columns.Finish, value); }
		}
		  
		[XmlAttribute("Unit")]
		[Bindable(true)]
		public string Unit 
		{
			get { return GetColumnValue<string>(Columns.Unit); }
			set { SetColumnValue(Columns.Unit, value); }
		}
		  
		[XmlAttribute("UnitPrice")]
		[Bindable(true)]
		public decimal? UnitPrice 
		{
			get { return GetColumnValue<decimal?>(Columns.UnitPrice); }
			set { SetColumnValue(Columns.UnitPrice, value); }
		}
		  
		[XmlAttribute("LastPriceUpdate")]
		[Bindable(true)]
		public DateTime? LastPriceUpdate 
		{
			get { return GetColumnValue<DateTime?>(Columns.LastPriceUpdate); }
			set { SetColumnValue(Columns.LastPriceUpdate, value); }
		}
		  
		[XmlAttribute("LastPriceUpdateBy")]
		[Bindable(true)]
		public string LastPriceUpdateBy 
		{
			get { return GetColumnValue<string>(Columns.LastPriceUpdateBy); }
			set { SetColumnValue(Columns.LastPriceUpdateBy, value); }
		}
		  
		[XmlAttribute("IsAssembly")]
		[Bindable(true)]
		public bool IsAssembly 
		{
			get { return GetColumnValue<bool>(Columns.IsAssembly); }
			set { SetColumnValue(Columns.IsAssembly, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varCategoryID,int? varAssemblyID,string varManufacturer,string varMake,string varModelNumber,string varDescription,string varColor,decimal? varLength,decimal? varWidth,decimal? varThickness,string varFinish,string varUnit,decimal? varUnitPrice,DateTime? varLastPriceUpdate,string varLastPriceUpdateBy,bool varIsAssembly)
		{
			InteriorsItem item = new InteriorsItem();
			
			item.CategoryID = varCategoryID;
			
			item.AssemblyID = varAssemblyID;
			
			item.Manufacturer = varManufacturer;
			
			item.Make = varMake;
			
			item.ModelNumber = varModelNumber;
			
			item.Description = varDescription;
			
			item.Color = varColor;
			
			item.Length = varLength;
			
			item.Width = varWidth;
			
			item.Thickness = varThickness;
			
			item.Finish = varFinish;
			
			item.Unit = varUnit;
			
			item.UnitPrice = varUnitPrice;
			
			item.LastPriceUpdate = varLastPriceUpdate;
			
			item.LastPriceUpdateBy = varLastPriceUpdateBy;
			
			item.IsAssembly = varIsAssembly;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varCategoryID,int? varAssemblyID,string varManufacturer,string varMake,string varModelNumber,string varDescription,string varColor,decimal? varLength,decimal? varWidth,decimal? varThickness,string varFinish,string varUnit,decimal? varUnitPrice,DateTime? varLastPriceUpdate,string varLastPriceUpdateBy,bool varIsAssembly)
		{
			InteriorsItem item = new InteriorsItem();
			
				item.Id = varId;
			
				item.CategoryID = varCategoryID;
			
				item.AssemblyID = varAssemblyID;
			
				item.Manufacturer = varManufacturer;
			
				item.Make = varMake;
			
				item.ModelNumber = varModelNumber;
			
				item.Description = varDescription;
			
				item.Color = varColor;
			
				item.Length = varLength;
			
				item.Width = varWidth;
			
				item.Thickness = varThickness;
			
				item.Finish = varFinish;
			
				item.Unit = varUnit;
			
				item.UnitPrice = varUnitPrice;
			
				item.LastPriceUpdate = varLastPriceUpdate;
			
				item.LastPriceUpdateBy = varLastPriceUpdateBy;
			
				item.IsAssembly = varIsAssembly;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CategoryIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn AssemblyIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ManufacturerColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MakeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ModelNumberColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ColorColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn LengthColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn WidthColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ThicknessColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn FinishColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn UnitPriceColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn LastPriceUpdateColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn LastPriceUpdateByColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn IsAssemblyColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string CategoryID = @"CategoryID";
			 public static string AssemblyID = @"AssemblyID";
			 public static string Manufacturer = @"Manufacturer";
			 public static string Make = @"Make";
			 public static string ModelNumber = @"ModelNumber";
			 public static string Description = @"Description";
			 public static string Color = @"Color";
			 public static string Length = @"Length";
			 public static string Width = @"Width";
			 public static string Thickness = @"Thickness";
			 public static string Finish = @"Finish";
			 public static string Unit = @"Unit";
			 public static string UnitPrice = @"UnitPrice";
			 public static string LastPriceUpdate = @"LastPriceUpdate";
			 public static string LastPriceUpdateBy = @"LastPriceUpdateBy";
			 public static string IsAssembly = @"IsAssembly";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
