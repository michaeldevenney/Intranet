using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DAL
{
	/// <summary>
	/// Strongly-typed collection for the Old class.
	/// </summary>
    [Serializable]
	public partial class OldCollection : ActiveList<Old, OldCollection>
	{	   
		public OldCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>OldCollection</returns>
		public OldCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Old o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the A_Production_OLD table.
	/// </summary>
	[Serializable]
	public partial class Old : ActiveRecord<Old>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Old()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Old(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Old(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Old(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("A_Production_OLD", TableType.Table, DataService.GetInstance("VeritasInfo"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarProjectID = new TableSchema.TableColumn(schema);
				colvarProjectID.ColumnName = "ProjectID";
				colvarProjectID.DataType = DbType.Int32;
				colvarProjectID.MaxLength = 0;
				colvarProjectID.AutoIncrement = false;
				colvarProjectID.IsNullable = true;
				colvarProjectID.IsPrimaryKey = false;
				colvarProjectID.IsForeignKey = false;
				colvarProjectID.IsReadOnly = false;
				colvarProjectID.DefaultSetting = @"";
				colvarProjectID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectID);
				
				TableSchema.TableColumn colvarProductionDate = new TableSchema.TableColumn(schema);
				colvarProductionDate.ColumnName = "ProductionDate";
				colvarProductionDate.DataType = DbType.DateTime;
				colvarProductionDate.MaxLength = 0;
				colvarProductionDate.AutoIncrement = false;
				colvarProductionDate.IsNullable = true;
				colvarProductionDate.IsPrimaryKey = false;
				colvarProductionDate.IsForeignKey = false;
				colvarProductionDate.IsReadOnly = false;
				colvarProductionDate.DefaultSetting = @"";
				colvarProductionDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProductionDate);
				
				TableSchema.TableColumn colvarBlockType = new TableSchema.TableColumn(schema);
				colvarBlockType.ColumnName = "BlockType";
				colvarBlockType.DataType = DbType.AnsiString;
				colvarBlockType.MaxLength = 10;
				colvarBlockType.AutoIncrement = false;
				colvarBlockType.IsNullable = true;
				colvarBlockType.IsPrimaryKey = false;
				colvarBlockType.IsForeignKey = false;
				colvarBlockType.IsReadOnly = false;
				colvarBlockType.DefaultSetting = @"";
				colvarBlockType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBlockType);
				
				TableSchema.TableColumn colvarAction = new TableSchema.TableColumn(schema);
				colvarAction.ColumnName = "Action";
				colvarAction.DataType = DbType.AnsiString;
				colvarAction.MaxLength = 10;
				colvarAction.AutoIncrement = false;
				colvarAction.IsNullable = true;
				colvarAction.IsPrimaryKey = false;
				colvarAction.IsForeignKey = false;
				colvarAction.IsReadOnly = false;
				colvarAction.DefaultSetting = @"";
				colvarAction.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAction);
				
				TableSchema.TableColumn colvarCount = new TableSchema.TableColumn(schema);
				colvarCount.ColumnName = "Count";
				colvarCount.DataType = DbType.Decimal;
				colvarCount.MaxLength = 0;
				colvarCount.AutoIncrement = false;
				colvarCount.IsNullable = true;
				colvarCount.IsPrimaryKey = false;
				colvarCount.IsForeignKey = false;
				colvarCount.IsReadOnly = false;
				colvarCount.DefaultSetting = @"";
				colvarCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCount);
				
				TableSchema.TableColumn colvarEnteredDate = new TableSchema.TableColumn(schema);
				colvarEnteredDate.ColumnName = "EnteredDate";
				colvarEnteredDate.DataType = DbType.DateTime;
				colvarEnteredDate.MaxLength = 0;
				colvarEnteredDate.AutoIncrement = false;
				colvarEnteredDate.IsNullable = true;
				colvarEnteredDate.IsPrimaryKey = false;
				colvarEnteredDate.IsForeignKey = false;
				colvarEnteredDate.IsReadOnly = false;
				colvarEnteredDate.DefaultSetting = @"";
				colvarEnteredDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEnteredDate);
				
				TableSchema.TableColumn colvarEnteredBy = new TableSchema.TableColumn(schema);
				colvarEnteredBy.ColumnName = "EnteredBy";
				colvarEnteredBy.DataType = DbType.AnsiString;
				colvarEnteredBy.MaxLength = 25;
				colvarEnteredBy.AutoIncrement = false;
				colvarEnteredBy.IsNullable = true;
				colvarEnteredBy.IsPrimaryKey = false;
				colvarEnteredBy.IsForeignKey = false;
				colvarEnteredBy.IsReadOnly = false;
				colvarEnteredBy.DefaultSetting = @"";
				colvarEnteredBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEnteredBy);
				
				TableSchema.TableColumn colvarComment = new TableSchema.TableColumn(schema);
				colvarComment.ColumnName = "Comment";
				colvarComment.DataType = DbType.AnsiString;
				colvarComment.MaxLength = -1;
				colvarComment.AutoIncrement = false;
				colvarComment.IsNullable = true;
				colvarComment.IsPrimaryKey = false;
				colvarComment.IsForeignKey = false;
				colvarComment.IsReadOnly = false;
				colvarComment.DefaultSetting = @"";
				colvarComment.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComment);
				
				TableSchema.TableColumn colvarProjectName = new TableSchema.TableColumn(schema);
				colvarProjectName.ColumnName = "ProjectName";
				colvarProjectName.DataType = DbType.AnsiString;
				colvarProjectName.MaxLength = 50;
				colvarProjectName.AutoIncrement = false;
				colvarProjectName.IsNullable = true;
				colvarProjectName.IsPrimaryKey = false;
				colvarProjectName.IsForeignKey = false;
				colvarProjectName.IsReadOnly = false;
				colvarProjectName.DefaultSetting = @"";
				colvarProjectName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectName);
				
				TableSchema.TableColumn colvarProcessed = new TableSchema.TableColumn(schema);
				colvarProcessed.ColumnName = "Processed";
				colvarProcessed.DataType = DbType.Boolean;
				colvarProcessed.MaxLength = 0;
				colvarProcessed.AutoIncrement = false;
				colvarProcessed.IsNullable = true;
				colvarProcessed.IsPrimaryKey = false;
				colvarProcessed.IsForeignKey = false;
				colvarProcessed.IsReadOnly = false;
				
						colvarProcessed.DefaultSetting = @"((0))";
				colvarProcessed.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProcessed);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["VeritasInfo"].AddSchema("A_Production_OLD",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("ProjectID")]
		[Bindable(true)]
		public int? ProjectID 
		{
			get { return GetColumnValue<int?>(Columns.ProjectID); }
			set { SetColumnValue(Columns.ProjectID, value); }
		}
		  
		[XmlAttribute("ProductionDate")]
		[Bindable(true)]
		public DateTime? ProductionDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.ProductionDate); }
			set { SetColumnValue(Columns.ProductionDate, value); }
		}
		  
		[XmlAttribute("BlockType")]
		[Bindable(true)]
		public string BlockType 
		{
			get { return GetColumnValue<string>(Columns.BlockType); }
			set { SetColumnValue(Columns.BlockType, value); }
		}
		  
		[XmlAttribute("Action")]
		[Bindable(true)]
		public string Action 
		{
			get { return GetColumnValue<string>(Columns.Action); }
			set { SetColumnValue(Columns.Action, value); }
		}
		  
		[XmlAttribute("Count")]
		[Bindable(true)]
		public decimal? Count 
		{
			get { return GetColumnValue<decimal?>(Columns.Count); }
			set { SetColumnValue(Columns.Count, value); }
		}
		  
		[XmlAttribute("EnteredDate")]
		[Bindable(true)]
		public DateTime? EnteredDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.EnteredDate); }
			set { SetColumnValue(Columns.EnteredDate, value); }
		}
		  
		[XmlAttribute("EnteredBy")]
		[Bindable(true)]
		public string EnteredBy 
		{
			get { return GetColumnValue<string>(Columns.EnteredBy); }
			set { SetColumnValue(Columns.EnteredBy, value); }
		}
		  
		[XmlAttribute("Comment")]
		[Bindable(true)]
		public string Comment 
		{
			get { return GetColumnValue<string>(Columns.Comment); }
			set { SetColumnValue(Columns.Comment, value); }
		}
		  
		[XmlAttribute("ProjectName")]
		[Bindable(true)]
		public string ProjectName 
		{
			get { return GetColumnValue<string>(Columns.ProjectName); }
			set { SetColumnValue(Columns.ProjectName, value); }
		}
		  
		[XmlAttribute("Processed")]
		[Bindable(true)]
		public bool? Processed 
		{
			get { return GetColumnValue<bool?>(Columns.Processed); }
			set { SetColumnValue(Columns.Processed, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varProjectID,DateTime? varProductionDate,string varBlockType,string varAction,decimal? varCount,DateTime? varEnteredDate,string varEnteredBy,string varComment,string varProjectName,bool? varProcessed)
		{
			Old item = new Old();
			
			item.ProjectID = varProjectID;
			
			item.ProductionDate = varProductionDate;
			
			item.BlockType = varBlockType;
			
			item.Action = varAction;
			
			item.Count = varCount;
			
			item.EnteredDate = varEnteredDate;
			
			item.EnteredBy = varEnteredBy;
			
			item.Comment = varComment;
			
			item.ProjectName = varProjectName;
			
			item.Processed = varProcessed;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varProjectID,DateTime? varProductionDate,string varBlockType,string varAction,decimal? varCount,DateTime? varEnteredDate,string varEnteredBy,string varComment,string varProjectName,bool? varProcessed)
		{
			Old item = new Old();
			
				item.Id = varId;
			
				item.ProjectID = varProjectID;
			
				item.ProductionDate = varProductionDate;
			
				item.BlockType = varBlockType;
			
				item.Action = varAction;
			
				item.Count = varCount;
			
				item.EnteredDate = varEnteredDate;
			
				item.EnteredBy = varEnteredBy;
			
				item.Comment = varComment;
			
				item.ProjectName = varProjectName;
			
				item.Processed = varProcessed;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ProductionDateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn BlockTypeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ActionColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CountColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn EnteredDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn EnteredByColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CommentColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectNameColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ProcessedColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string ProjectID = @"ProjectID";
			 public static string ProductionDate = @"ProductionDate";
			 public static string BlockType = @"BlockType";
			 public static string Action = @"Action";
			 public static string Count = @"Count";
			 public static string EnteredDate = @"EnteredDate";
			 public static string EnteredBy = @"EnteredBy";
			 public static string Comment = @"Comment";
			 public static string ProjectName = @"ProjectName";
			 public static string Processed = @"Processed";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
